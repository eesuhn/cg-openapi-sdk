# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from coingecko_python.models.trending_search_categories_inner_data_market_cap_change_percentage24h import TrendingSearchCategoriesInnerDataMarketCapChangePercentage24h
from typing import Optional, Set
from typing_extensions import Self

class TrendingSearchCategoriesInnerData(BaseModel):
    """
    TrendingSearchCategoriesInnerData
    """ # noqa: E501
    market_cap: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="category market cap")
    market_cap_btc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="category market cap in btc")
    total_volume: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="category total volume")
    total_volume_btc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="category total volume in btc")
    market_cap_change_percentage_24h: Optional[TrendingSearchCategoriesInnerDataMarketCapChangePercentage24h] = None
    sparkline: Optional[StrictStr] = Field(default=None, description="category sparkline image url")
    __properties: ClassVar[List[str]] = ["market_cap", "market_cap_btc", "total_volume", "total_volume_btc", "market_cap_change_percentage_24h", "sparkline"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrendingSearchCategoriesInnerData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of market_cap_change_percentage_24h
        if self.market_cap_change_percentage_24h:
            _dict['market_cap_change_percentage_24h'] = self.market_cap_change_percentage_24h.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrendingSearchCategoriesInnerData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "market_cap": obj.get("market_cap"),
            "market_cap_btc": obj.get("market_cap_btc"),
            "total_volume": obj.get("total_volume"),
            "total_volume_btc": obj.get("total_volume_btc"),
            "market_cap_change_percentage_24h": TrendingSearchCategoriesInnerDataMarketCapChangePercentage24h.from_dict(obj["market_cap_change_percentage_24h"]) if obj.get("market_cap_change_percentage_24h") is not None else None,
            "sparkline": obj.get("sparkline")
        })
        return _obj


