# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from coingecko_python.models.search_categories_inner import SearchCategoriesInner
from coingecko_python.models.search_coins_inner import SearchCoinsInner
from coingecko_python.models.search_exchanges_inner import SearchExchangesInner
from coingecko_python.models.search_nfts_inner import SearchNftsInner
from typing import Optional, Set
from typing_extensions import Self

class Search(BaseModel):
    """
    Search
    """ # noqa: E501
    coins: Optional[List[SearchCoinsInner]] = None
    exchanges: Optional[List[SearchExchangesInner]] = None
    icos: Optional[List[StrictStr]] = None
    categories: Optional[List[SearchCategoriesInner]] = None
    nfts: Optional[List[SearchNftsInner]] = None
    __properties: ClassVar[List[str]] = ["coins", "exchanges", "icos", "categories", "nfts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Search from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in coins (list)
        _items = []
        if self.coins:
            for _item_coins in self.coins:
                if _item_coins:
                    _items.append(_item_coins.to_dict())
            _dict['coins'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in exchanges (list)
        _items = []
        if self.exchanges:
            for _item_exchanges in self.exchanges:
                if _item_exchanges:
                    _items.append(_item_exchanges.to_dict())
            _dict['exchanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item_categories in self.categories:
                if _item_categories:
                    _items.append(_item_categories.to_dict())
            _dict['categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nfts (list)
        _items = []
        if self.nfts:
            for _item_nfts in self.nfts:
                if _item_nfts:
                    _items.append(_item_nfts.to_dict())
            _dict['nfts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Search from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coins": [SearchCoinsInner.from_dict(_item) for _item in obj["coins"]] if obj.get("coins") is not None else None,
            "exchanges": [SearchExchangesInner.from_dict(_item) for _item in obj["exchanges"]] if obj.get("exchanges") is not None else None,
            "icos": obj.get("icos"),
            "categories": [SearchCategoriesInner.from_dict(_item) for _item in obj["categories"]] if obj.get("categories") is not None else None,
            "nfts": [SearchNftsInner.from_dict(_item) for _item in obj["nfts"]] if obj.get("nfts") is not None else None
        })
        return _obj


