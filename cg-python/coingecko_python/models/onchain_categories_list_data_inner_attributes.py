# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from coingecko_python.models.onchain_categories_list_data_inner_attributes_volume_change_percentage import OnchainCategoriesListDataInnerAttributesVolumeChangePercentage
from typing import Optional, Set
from typing_extensions import Self

class OnchainCategoriesListDataInnerAttributes(BaseModel):
    """
    OnchainCategoriesListDataInnerAttributes
    """ # noqa: E501
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    volume_change_percentage: Optional[OnchainCategoriesListDataInnerAttributesVolumeChangePercentage] = None
    reserve_in_usd: Optional[StrictStr] = None
    fdv_usd: Optional[StrictStr] = None
    h24_volume_usd: Optional[StrictStr] = None
    h24_tx_count: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["name", "description", "volume_change_percentage", "reserve_in_usd", "fdv_usd", "h24_volume_usd", "h24_tx_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OnchainCategoriesListDataInnerAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of volume_change_percentage
        if self.volume_change_percentage:
            _dict['volume_change_percentage'] = self.volume_change_percentage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OnchainCategoriesListDataInnerAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "volume_change_percentage": OnchainCategoriesListDataInnerAttributesVolumeChangePercentage.from_dict(obj["volume_change_percentage"]) if obj.get("volume_change_percentage") is not None else None,
            "reserve_in_usd": obj.get("reserve_in_usd"),
            "fdv_usd": obj.get("fdv_usd"),
            "h24_volume_usd": obj.get("h24_volume_usd"),
            "h24_tx_count": obj.get("h24_tx_count")
        })
        return _obj


