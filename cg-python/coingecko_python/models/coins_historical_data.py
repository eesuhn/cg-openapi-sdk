# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from coingecko_python.models.coins_historical_data_community_data import CoinsHistoricalDataCommunityData
from coingecko_python.models.coins_historical_data_developer_data import CoinsHistoricalDataDeveloperData
from coingecko_python.models.coins_historical_data_image import CoinsHistoricalDataImage
from coingecko_python.models.coins_historical_data_market_data import CoinsHistoricalDataMarketData
from coingecko_python.models.coins_historical_data_public_interest_stats import CoinsHistoricalDataPublicInterestStats
from typing import Optional, Set
from typing_extensions import Self

class CoinsHistoricalData(BaseModel):
    """
    CoinsHistoricalData
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="coin ID")
    symbol: Optional[StrictStr] = Field(default=None, description="coin symbol")
    name: Optional[StrictStr] = Field(default=None, description="coin name")
    localization: Optional[Dict[str, StrictStr]] = Field(default=None, description="coin localization")
    image: Optional[CoinsHistoricalDataImage] = None
    market_data: Optional[CoinsHistoricalDataMarketData] = None
    community_data: Optional[CoinsHistoricalDataCommunityData] = None
    developer_data: Optional[CoinsHistoricalDataDeveloperData] = None
    public_interest_stats: Optional[CoinsHistoricalDataPublicInterestStats] = None
    __properties: ClassVar[List[str]] = ["id", "symbol", "name", "localization", "image", "market_data", "community_data", "developer_data", "public_interest_stats"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoinsHistoricalData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of market_data
        if self.market_data:
            _dict['market_data'] = self.market_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of community_data
        if self.community_data:
            _dict['community_data'] = self.community_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of developer_data
        if self.developer_data:
            _dict['developer_data'] = self.developer_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of public_interest_stats
        if self.public_interest_stats:
            _dict['public_interest_stats'] = self.public_interest_stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoinsHistoricalData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "symbol": obj.get("symbol"),
            "name": obj.get("name"),
            "localization": obj.get("localization"),
            "image": CoinsHistoricalDataImage.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "market_data": CoinsHistoricalDataMarketData.from_dict(obj["market_data"]) if obj.get("market_data") is not None else None,
            "community_data": CoinsHistoricalDataCommunityData.from_dict(obj["community_data"]) if obj.get("community_data") is not None else None,
            "developer_data": CoinsHistoricalDataDeveloperData.from_dict(obj["developer_data"]) if obj.get("developer_data") is not None else None,
            "public_interest_stats": CoinsHistoricalDataPublicInterestStats.from_dict(obj["public_interest_stats"]) if obj.get("public_interest_stats") is not None else None
        })
        return _obj


