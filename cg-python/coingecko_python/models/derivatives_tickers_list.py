# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DerivativesTickersList(BaseModel):
    """
    DerivativesTickersList
    """ # noqa: E501
    market: Optional[StrictStr] = Field(default=None, description="derivative market name")
    symbol: Optional[StrictStr] = Field(default=None, description="derivative ticker symbol")
    index_id: Optional[StrictStr] = Field(default=None, description="derivative underlying asset")
    price: Optional[StrictStr] = Field(default=None, description="derivative ticker price")
    price_percentage_change_24h: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="derivative ticker price percentage change in 24 hours")
    contract_type: Optional[StrictStr] = Field(default=None, description="derivative contract type")
    index: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="derivative underlying asset price")
    basis: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="difference of derivative price and index price")
    spread: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="derivative bid ask spread")
    funding_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="derivative funding rate")
    open_interest: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="derivative open interest")
    volume_24h: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="derivative volume in 24 hours")
    last_traded_at: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="derivative last updated time")
    expired_at: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["market", "symbol", "index_id", "price", "price_percentage_change_24h", "contract_type", "index", "basis", "spread", "funding_rate", "open_interest", "volume_24h", "last_traded_at", "expired_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DerivativesTickersList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if expired_at (nullable) is None
        # and model_fields_set contains the field
        if self.expired_at is None and "expired_at" in self.model_fields_set:
            _dict['expired_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DerivativesTickersList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "market": obj.get("market"),
            "symbol": obj.get("symbol"),
            "index_id": obj.get("index_id"),
            "price": obj.get("price"),
            "price_percentage_change_24h": obj.get("price_percentage_change_24h"),
            "contract_type": obj.get("contract_type"),
            "index": obj.get("index"),
            "basis": obj.get("basis"),
            "spread": obj.get("spread"),
            "funding_rate": obj.get("funding_rate"),
            "open_interest": obj.get("open_interest"),
            "volume_24h": obj.get("volume_24h"),
            "last_traded_at": obj.get("last_traded_at"),
            "expired_at": obj.get("expired_at")
        })
        return _obj


