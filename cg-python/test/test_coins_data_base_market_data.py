# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from coingecko_python.models.coins_data_base_market_data import CoinsDataBaseMarketData

class TestCoinsDataBaseMarketData(unittest.TestCase):
    """CoinsDataBaseMarketData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CoinsDataBaseMarketData:
        """Test CoinsDataBaseMarketData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CoinsDataBaseMarketData`
        """
        model = CoinsDataBaseMarketData()
        if include_optional:
            return CoinsDataBaseMarketData(
                current_price = coingecko_python.models.coins_data_base_market_data_current_price.CoinsDataBase_market_data_current_price(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                total_value_locked = 1.337,
                mcap_to_tvl_ratio = 1.337,
                fdv_to_tvl_ratio = 1.337,
                roi = 1.337,
                ath = coingecko_python.models.coins_data_base_market_data_ath.CoinsDataBase_market_data_ath(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                ath_change_percentage = coingecko_python.models.coins_data_base_market_data_ath_change_percentage.CoinsDataBase_market_data_ath_change_percentage(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                ath_date = coingecko_python.models.coins_data_base_market_data_ath_date.CoinsDataBase_market_data_ath_date(
                    btc = '', 
                    eur = '', 
                    usd = '', ),
                atl = coingecko_python.models.coins_data_base_market_data_atl.CoinsDataBase_market_data_atl(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                atl_change_percentage = coingecko_python.models.coins_data_base_market_data_atl_change_percentage.CoinsDataBase_market_data_atl_change_percentage(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                atl_date = coingecko_python.models.coins_data_base_market_data_atl_date.CoinsDataBase_market_data_atl_date(
                    btc = '', 
                    eur = '', 
                    usd = '', ),
                market_cap = coingecko_python.models.coins_data_base_market_data_market_cap.CoinsDataBase_market_data_market_cap(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                market_cap_rank = 1.337,
                fully_diluted_valuation = coingecko_python.models.coins_data_base_market_data_fully_diluted_valuation.CoinsDataBase_market_data_fully_diluted_valuation(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                market_cap_fdv_ratio = 1.337,
                total_volume = coingecko_python.models.coins_data_base_market_data_total_volume.CoinsDataBase_market_data_total_volume(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                high_24h = coingecko_python.models.coins_data_base_market_data_high_24h.CoinsDataBase_market_data_high_24h(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                low_24h = coingecko_python.models.coins_data_base_market_data_low_24h.CoinsDataBase_market_data_low_24h(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                price_change_24h = 1.337,
                price_change_percentage_24h = 1.337,
                price_change_percentage_7d = 1.337,
                price_change_percentage_14d = 1.337,
                price_change_percentage_30d = 1.337,
                price_change_percentage_60d = 1.337,
                price_change_percentage_200d = 1.337,
                price_change_percentage_1y = 1.337,
                market_cap_change_24h = 1.337,
                market_cap_change_percentage_24h = 1.337,
                price_change_percentage_1h_in_currency = coingecko_python.models.coins_data_base_market_data_price_change_percentage_1h_in_currency.CoinsDataBase_market_data_price_change_percentage_1h_in_currency(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                price_change_percentage_24h_in_currency = coingecko_python.models.coins_data_base_market_data_price_change_percentage_24h_in_currency.CoinsDataBase_market_data_price_change_percentage_24h_in_currency(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                price_change_percentage_7d_in_currency = coingecko_python.models.coins_data_base_market_data_price_change_percentage_7d_in_currency.CoinsDataBase_market_data_price_change_percentage_7d_in_currency(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                price_change_percentage_14d_in_currency = coingecko_python.models.coins_data_base_market_data_price_change_percentage_14d_in_currency.CoinsDataBase_market_data_price_change_percentage_14d_in_currency(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                price_change_percentage_30d_in_currency = coingecko_python.models.coins_data_base_market_data_price_change_percentage_30d_in_currency.CoinsDataBase_market_data_price_change_percentage_30d_in_currency(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                price_change_percentage_60d_in_currency = coingecko_python.models.coins_data_base_market_data_price_change_percentage_60d_in_currency.CoinsDataBase_market_data_price_change_percentage_60d_in_currency(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                price_change_percentage_200d_in_currency = coingecko_python.models.coins_data_base_market_data_price_change_percentage_200d_in_currency.CoinsDataBase_market_data_price_change_percentage_200d_in_currency(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                price_change_percentage_1y_in_currency = coingecko_python.models.coins_data_base_market_data_price_change_percentage_1y_in_currency.CoinsDataBase_market_data_price_change_percentage_1y_in_currency(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                market_cap_change_24h_in_currency = coingecko_python.models.coins_data_base_market_data_market_cap_change_24h_in_currency.CoinsDataBase_market_data_market_cap_change_24h_in_currency(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                market_cap_change_percentage_24h_in_currency = coingecko_python.models.coins_data_base_market_data_market_cap_change_percentage_24h_in_currency.CoinsDataBase_market_data_market_cap_change_percentage_24h_in_currency(
                    btc = 1.337, 
                    eur = 1.337, 
                    usd = 1.337, ),
                total_supply = 1.337,
                max_supply = 1.337,
                circulating_supply = 1.337,
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return CoinsDataBaseMarketData(
        )
        """

    def testCoinsDataBaseMarketData(self):
        """Test CoinsDataBaseMarketData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
