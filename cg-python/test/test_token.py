# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from coingecko-sdk.models.token import Token

class TestToken(unittest.TestCase):
    """Token unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Token:
        """Test Token
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Token`
        """
        model = Token()
        if include_optional:
            return Token(
                data = coingecko-sdk.models.token_data.Token_data(
                    id = '', 
                    type = '', 
                    attributes = coingecko-sdk.models.token_data_attributes.Token_data_attributes(
                        address = '', 
                        name = '', 
                        symbol = '', 
                        image_url = '', 
                        coingecko_coin_id = '', 
                        decimals = 56, 
                        total_supply = '', 
                        price_usd = '', 
                        fdv_usd = '', 
                        total_reserve_in_usd = '', 
                        volume_usd = coingecko-sdk.models.token_data_attributes_volume_usd.Token_data_attributes_volume_usd(
                            h24 = '', ), 
                        market_cap_usd = '', ), 
                    relationships = coingecko-sdk.models.token_data_relationships.Token_data_relationships(
                        top_pools = coingecko-sdk.models.token_data_relationships_top_pools.Token_data_relationships_top_pools(
                            data = [
                                coingecko-sdk.models.pool_data_inner_relationships_base_token_data.Pool_data_inner_relationships_base_token_data(
                                    id = '', 
                                    type = '', )
                                ], ), ), ),
                included = [
                    coingecko-sdk.models.token_included_inner.Token_included_inner(
                        id = '', 
                        type = '', 
                        attributes = coingecko-sdk.models.token_included_inner_attributes.Token_included_inner_attributes(
                            base_token_price_usd = '', 
                            base_token_price_native_currency = '', 
                            quote_token_price_usd = '', 
                            quote_token_price_native_currency = '', 
                            base_token_price_quote_token = '', 
                            quote_token_price_base_token = '', 
                            address = '', 
                            name = '', 
                            pool_created_at = '', 
                            token_price_usd = '', 
                            fdv_usd = '', 
                            market_cap_usd = '', 
                            price_change_percentage = coingecko-sdk.models.pool_data_inner_attributes_price_change_percentage.Pool_data_inner_attributes_price_change_percentage(
                                m5 = '', 
                                h1 = '', 
                                h6 = '', 
                                h24 = '', ), 
                            transactions = coingecko-sdk.models.pool_data_inner_attributes_transactions.Pool_data_inner_attributes_transactions(
                                m5 = coingecko-sdk.models.pool_data_inner_attributes_transactions_m5.Pool_data_inner_attributes_transactions_m5(
                                    buys = 56, 
                                    sells = 56, 
                                    buyers = 56, 
                                    sellers = 56, ), 
                                m15 = coingecko-sdk.models.pool_data_inner_attributes_transactions_m5.Pool_data_inner_attributes_transactions_m5(
                                    buys = 56, 
                                    sells = 56, 
                                    buyers = 56, 
                                    sellers = 56, ), 
                                m30 = , 
                                h1 = , 
                                h24 = , ), 
                            volume_usd = coingecko-sdk.models.pool_data_inner_attributes_price_change_percentage.Pool_data_inner_attributes_price_change_percentage(
                                h6 = '', ), 
                            reserve_in_usd = '', ), 
                        relationships = coingecko-sdk.models.token_included_inner_relationships.Token_included_inner_relationships(
                            base_token = coingecko-sdk.models.pool_data_inner_relationships_base_token.Pool_data_inner_relationships_base_token(
                                data = coingecko-sdk.models.pool_data_inner_relationships_base_token_data.Pool_data_inner_relationships_base_token_data(
                                    id = '', 
                                    type = '', ), ), 
                            quote_token = coingecko-sdk.models.pool_data_inner_relationships_base_token.Pool_data_inner_relationships_base_token(), 
                            dex = , ), )
                    ]
            )
        else:
            return Token(
        )
        """

    def testToken(self):
        """Test Token"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
