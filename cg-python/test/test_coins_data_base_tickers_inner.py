# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from coingecko_sdk.models.coins_data_base_tickers_inner import CoinsDataBaseTickersInner

class TestCoinsDataBaseTickersInner(unittest.TestCase):
    """CoinsDataBaseTickersInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CoinsDataBaseTickersInner:
        """Test CoinsDataBaseTickersInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CoinsDataBaseTickersInner`
        """
        model = CoinsDataBaseTickersInner()
        if include_optional:
            return CoinsDataBaseTickersInner(
                base = '',
                target = '',
                market = coingecko_sdk.models.coins_data_base_tickers_inner_market.CoinsDataBase_tickers_inner_market(
                    name = '', 
                    identifier = '', 
                    has_trading_incentive = True, ),
                last = 1.337,
                volume = 1.337,
                converted_last = coingecko_sdk.models.coins_data_base_tickers_inner_converted_last.CoinsDataBase_tickers_inner_converted_last(
                    btc = 1.337, 
                    eth = 1.337, 
                    usd = 1.337, ),
                converted_volume = coingecko_sdk.models.coins_data_base_tickers_inner_converted_volume.CoinsDataBase_tickers_inner_converted_volume(
                    btc = 1.337, 
                    eth = 1.337, 
                    usd = 1.337, ),
                trust_score = '',
                bid_ask_spread_percentage = 1.337,
                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_traded_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_fetch_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                is_anomaly = True,
                is_stale = True,
                trade_url = '',
                token_info_url = '',
                coin_id = '',
                target_coin_id = ''
            )
        else:
            return CoinsDataBaseTickersInner(
        )
        """

    def testCoinsDataBaseTickersInner(self):
        """Test CoinsDataBaseTickersInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
