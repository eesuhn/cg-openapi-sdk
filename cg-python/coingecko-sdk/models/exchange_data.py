# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from coingecko-sdk.models.coins_tickers import CoinsTickers
from typing import Optional, Set
from typing_extensions import Self

class ExchangeData(BaseModel):
    """
    ExchangeData
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="exchange name")
    year_established: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="exchange established year")
    country: Optional[StrictStr] = Field(default=None, description="exchange incorporated country")
    description: Optional[StrictStr] = Field(default=None, description="exchange description")
    url: Optional[StrictStr] = Field(default=None, description="exchange website url")
    image: Optional[StrictStr] = Field(default=None, description="exchange image url")
    facebook_url: Optional[StrictStr] = Field(default=None, description="exchange facebook url")
    reddit_url: Optional[StrictStr] = Field(default=None, description="exchange reddit url")
    telegram_url: Optional[StrictStr] = Field(default=None, description="exchange telegram url")
    slack_url: Optional[StrictStr] = Field(default=None, description="exchange slack url")
    other_url_1: Optional[StrictStr] = None
    other_url_2: Optional[StrictStr] = None
    twitter_handle: Optional[StrictStr] = Field(default=None, description="exchange twitter handle")
    has_trading_incentive: Optional[StrictBool] = Field(default=None, description="exchange trading incentive")
    centralized: Optional[StrictBool] = Field(default=None, description="exchange type (true for centralized, false for decentralized)")
    public_notice: Optional[StrictStr] = Field(default=None, description="public notice for exchange")
    alert_notice: Optional[StrictStr] = Field(default=None, description="alert notice for exchange")
    trust_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="exchange trust score")
    trust_score_rank: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="exchange trust score rank")
    trade_volume_24h_btc: Optional[Union[StrictFloat, StrictInt]] = None
    trade_volume_24h_btc_normalized: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="normalized trading volume by traffic in BTC in 24 hours <br> *refers to [`this blog`](https://blog.coingecko.com/trust-score/).")
    coins: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of coins listed on the exchange")
    pairs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of trading pairs on the exchange")
    tickers: Optional[List[CoinsTickers]] = None
    __properties: ClassVar[List[str]] = ["name", "year_established", "country", "description", "url", "image", "facebook_url", "reddit_url", "telegram_url", "slack_url", "other_url_1", "other_url_2", "twitter_handle", "has_trading_incentive", "centralized", "public_notice", "alert_notice", "trust_score", "trust_score_rank", "trade_volume_24h_btc", "trade_volume_24h_btc_normalized", "coins", "pairs", "tickers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExchangeData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tickers (list)
        _items = []
        if self.tickers:
            for _item_tickers in self.tickers:
                if _item_tickers:
                    _items.append(_item_tickers.to_dict())
            _dict['tickers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExchangeData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "year_established": obj.get("year_established"),
            "country": obj.get("country"),
            "description": obj.get("description"),
            "url": obj.get("url"),
            "image": obj.get("image"),
            "facebook_url": obj.get("facebook_url"),
            "reddit_url": obj.get("reddit_url"),
            "telegram_url": obj.get("telegram_url"),
            "slack_url": obj.get("slack_url"),
            "other_url_1": obj.get("other_url_1"),
            "other_url_2": obj.get("other_url_2"),
            "twitter_handle": obj.get("twitter_handle"),
            "has_trading_incentive": obj.get("has_trading_incentive"),
            "centralized": obj.get("centralized"),
            "public_notice": obj.get("public_notice"),
            "alert_notice": obj.get("alert_notice"),
            "trust_score": obj.get("trust_score"),
            "trust_score_rank": obj.get("trust_score_rank"),
            "trade_volume_24h_btc": obj.get("trade_volume_24h_btc"),
            "trade_volume_24h_btc_normalized": obj.get("trade_volume_24h_btc_normalized"),
            "coins": obj.get("coins"),
            "pairs": obj.get("pairs"),
            "tickers": [CoinsTickers.from_dict(_item) for _item in obj["tickers"]] if obj.get("tickers") is not None else None
        })
        return _obj


