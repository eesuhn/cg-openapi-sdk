# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from coingecko-sdk.models.nft_data_floor_price import NFTDataFloorPrice
from coingecko-sdk.models.nft_data_image import NFTDataImage
from coingecko-sdk.models.nft_data_market_cap import NFTDataMarketCap
from coingecko-sdk.models.nft_data_market_cap24h_percentage_change import NFTDataMarketCap24hPercentageChange
from coingecko-sdk.models.nft_data_volume24h import NFTDataVolume24h
from coingecko-sdk.models.nft_data_volume24h_percentage_change import NFTDataVolume24hPercentageChange
from coingecko-sdk.models.nfts_markets_inner_floor_price24h_percentage_change import NFTsMarketsInnerFloorPrice24hPercentageChange
from typing import Optional, Set
from typing_extensions import Self

class NFTsMarketsInner(BaseModel):
    """
    NFTsMarketsInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="NFT collection ID")
    contract_address: Optional[StrictStr] = Field(default=None, description="NFT collection contract address")
    asset_platform_id: Optional[StrictStr] = Field(default=None, description="NFT collection asset platform ID")
    name: Optional[StrictStr] = Field(default=None, description="NFT collection name")
    symbol: Optional[StrictStr] = Field(default=None, description="NFT collection symbol")
    image: Optional[NFTDataImage] = None
    description: Optional[StrictStr] = Field(default=None, description="NFT collection description")
    native_currency: Optional[StrictStr] = Field(default=None, description="NFT collection native currency")
    native_currency_symbol: Optional[StrictStr] = Field(default=None, description="NFT collection native currency symbol")
    market_cap_rank: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin market cap rank")
    floor_price: Optional[NFTDataFloorPrice] = None
    market_cap: Optional[NFTDataMarketCap] = None
    volume_24h: Optional[NFTDataVolume24h] = None
    floor_price_in_usd_24h_percentage_change: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="NFT collection floor price in usd 24 hours percentage change")
    floor_price_24h_percentage_change: Optional[NFTsMarketsInnerFloorPrice24hPercentageChange] = None
    market_cap_24h_percentage_change: Optional[NFTDataMarketCap24hPercentageChange] = None
    volume_24h_percentage_change: Optional[NFTDataVolume24hPercentageChange] = None
    number_of_unique_addresses: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of unique address owning the NFTs")
    number_of_unique_addresses_24h_percentage_change: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of unique address owning the NFTs 24 hours percentage change")
    volume_in_usd_24h_percentage_change: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="NFT collection volume in usd 24 hours percentage change")
    total_supply: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="NFT collection total supply")
    one_day_sales: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="NFT collection one day sales")
    one_day_sales_24h_percentage_change: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="NFT collection one day sales 24 hours percentage change")
    one_day_average_sale_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="NFT collection one day average sale price")
    one_day_average_sale_price_24h_percentage_change: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="NFT collection one day average sale price 24 hours percentage change")
    __properties: ClassVar[List[str]] = ["id", "contract_address", "asset_platform_id", "name", "symbol", "image", "description", "native_currency", "native_currency_symbol", "market_cap_rank", "floor_price", "market_cap", "volume_24h", "floor_price_in_usd_24h_percentage_change", "floor_price_24h_percentage_change", "market_cap_24h_percentage_change", "volume_24h_percentage_change", "number_of_unique_addresses", "number_of_unique_addresses_24h_percentage_change", "volume_in_usd_24h_percentage_change", "total_supply", "one_day_sales", "one_day_sales_24h_percentage_change", "one_day_average_sale_price", "one_day_average_sale_price_24h_percentage_change"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NFTsMarketsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of floor_price
        if self.floor_price:
            _dict['floor_price'] = self.floor_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of market_cap
        if self.market_cap:
            _dict['market_cap'] = self.market_cap.to_dict()
        # override the default output from pydantic by calling `to_dict()` of volume_24h
        if self.volume_24h:
            _dict['volume_24h'] = self.volume_24h.to_dict()
        # override the default output from pydantic by calling `to_dict()` of floor_price_24h_percentage_change
        if self.floor_price_24h_percentage_change:
            _dict['floor_price_24h_percentage_change'] = self.floor_price_24h_percentage_change.to_dict()
        # override the default output from pydantic by calling `to_dict()` of market_cap_24h_percentage_change
        if self.market_cap_24h_percentage_change:
            _dict['market_cap_24h_percentage_change'] = self.market_cap_24h_percentage_change.to_dict()
        # override the default output from pydantic by calling `to_dict()` of volume_24h_percentage_change
        if self.volume_24h_percentage_change:
            _dict['volume_24h_percentage_change'] = self.volume_24h_percentage_change.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NFTsMarketsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "contract_address": obj.get("contract_address"),
            "asset_platform_id": obj.get("asset_platform_id"),
            "name": obj.get("name"),
            "symbol": obj.get("symbol"),
            "image": NFTDataImage.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "description": obj.get("description"),
            "native_currency": obj.get("native_currency"),
            "native_currency_symbol": obj.get("native_currency_symbol"),
            "market_cap_rank": obj.get("market_cap_rank"),
            "floor_price": NFTDataFloorPrice.from_dict(obj["floor_price"]) if obj.get("floor_price") is not None else None,
            "market_cap": NFTDataMarketCap.from_dict(obj["market_cap"]) if obj.get("market_cap") is not None else None,
            "volume_24h": NFTDataVolume24h.from_dict(obj["volume_24h"]) if obj.get("volume_24h") is not None else None,
            "floor_price_in_usd_24h_percentage_change": obj.get("floor_price_in_usd_24h_percentage_change"),
            "floor_price_24h_percentage_change": NFTsMarketsInnerFloorPrice24hPercentageChange.from_dict(obj["floor_price_24h_percentage_change"]) if obj.get("floor_price_24h_percentage_change") is not None else None,
            "market_cap_24h_percentage_change": NFTDataMarketCap24hPercentageChange.from_dict(obj["market_cap_24h_percentage_change"]) if obj.get("market_cap_24h_percentage_change") is not None else None,
            "volume_24h_percentage_change": NFTDataVolume24hPercentageChange.from_dict(obj["volume_24h_percentage_change"]) if obj.get("volume_24h_percentage_change") is not None else None,
            "number_of_unique_addresses": obj.get("number_of_unique_addresses"),
            "number_of_unique_addresses_24h_percentage_change": obj.get("number_of_unique_addresses_24h_percentage_change"),
            "volume_in_usd_24h_percentage_change": obj.get("volume_in_usd_24h_percentage_change"),
            "total_supply": obj.get("total_supply"),
            "one_day_sales": obj.get("one_day_sales"),
            "one_day_sales_24h_percentage_change": obj.get("one_day_sales_24h_percentage_change"),
            "one_day_average_sale_price": obj.get("one_day_average_sale_price"),
            "one_day_average_sale_price_24h_percentage_change": obj.get("one_day_average_sale_price_24h_percentage_change")
        })
        return _obj


