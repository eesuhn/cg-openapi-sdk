# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DerivativesExchanges(BaseModel):
    """
    DerivativesExchanges
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="derivatives exchange name")
    id: Optional[StrictStr] = Field(default=None, description="derivatives exchange ID")
    open_interest_btc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="derivatives exchange open interest in BTC")
    trade_volume_24h_btc: Optional[StrictStr] = Field(default=None, description="derivatives exchange trade volume in BTC in 24 hours")
    number_of_perpetual_pairs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of perpetual pairs in the derivatives exchange")
    number_of_futures_pairs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of futures pairs in the derivatives exchange")
    image: Optional[StrictStr] = Field(default=None, description="derivatives exchange image url")
    year_established: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="derivatives exchange established year")
    country: Optional[StrictStr] = Field(default=None, description="derivatives exchange incorporated country")
    description: Optional[StrictStr] = Field(default=None, description="derivatives exchange description")
    url: Optional[StrictStr] = Field(default=None, description="derivatives exchange website url")
    __properties: ClassVar[List[str]] = ["name", "id", "open_interest_btc", "trade_volume_24h_btc", "number_of_perpetual_pairs", "number_of_futures_pairs", "image", "year_established", "country", "description", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DerivativesExchanges from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if year_established (nullable) is None
        # and model_fields_set contains the field
        if self.year_established is None and "year_established" in self.model_fields_set:
            _dict['year_established'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DerivativesExchanges from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "id": obj.get("id"),
            "open_interest_btc": obj.get("open_interest_btc"),
            "trade_volume_24h_btc": obj.get("trade_volume_24h_btc"),
            "number_of_perpetual_pairs": obj.get("number_of_perpetual_pairs"),
            "number_of_futures_pairs": obj.get("number_of_futures_pairs"),
            "image": obj.get("image"),
            "year_established": obj.get("year_established"),
            "country": obj.get("country"),
            "description": obj.get("description"),
            "url": obj.get("url")
        })
        return _obj


