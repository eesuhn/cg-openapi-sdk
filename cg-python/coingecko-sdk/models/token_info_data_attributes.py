# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from coingecko-sdk.models.token_info_data_attributes_holders import TokenInfoDataAttributesHolders
from typing import Optional, Set
from typing_extensions import Self

class TokenInfoDataAttributes(BaseModel):
    """
    TokenInfoDataAttributes
    """ # noqa: E501
    address: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    symbol: Optional[StrictStr] = None
    image_url: Optional[StrictStr] = None
    coingecko_coin_id: Optional[StrictStr] = None
    websites: Optional[List[StrictStr]] = None
    description: Optional[StrictStr] = None
    gt_score: Optional[Union[StrictFloat, StrictInt]] = None
    discord_url: Optional[StrictStr] = None
    telegram_handle: Optional[StrictStr] = None
    twitter_handle: Optional[StrictStr] = None
    categories: Optional[List[StrictStr]] = None
    gt_categories_id: Optional[List[StrictStr]] = None
    holders: Optional[TokenInfoDataAttributesHolders] = None
    __properties: ClassVar[List[str]] = ["address", "name", "symbol", "image_url", "coingecko_coin_id", "websites", "description", "gt_score", "discord_url", "telegram_handle", "twitter_handle", "categories", "gt_categories_id", "holders"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TokenInfoDataAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of holders
        if self.holders:
            _dict['holders'] = self.holders.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TokenInfoDataAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "name": obj.get("name"),
            "symbol": obj.get("symbol"),
            "image_url": obj.get("image_url"),
            "coingecko_coin_id": obj.get("coingecko_coin_id"),
            "websites": obj.get("websites"),
            "description": obj.get("description"),
            "gt_score": obj.get("gt_score"),
            "discord_url": obj.get("discord_url"),
            "telegram_handle": obj.get("telegram_handle"),
            "twitter_handle": obj.get("twitter_handle"),
            "categories": obj.get("categories"),
            "gt_categories_id": obj.get("gt_categories_id"),
            "holders": TokenInfoDataAttributesHolders.from_dict(obj["holders"]) if obj.get("holders") is not None else None
        })
        return _obj


