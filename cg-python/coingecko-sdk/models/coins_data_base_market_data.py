# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from coingecko-sdk.models.coins_data_base_market_data_ath import CoinsDataBaseMarketDataAth
from coingecko-sdk.models.coins_data_base_market_data_ath_change_percentage import CoinsDataBaseMarketDataAthChangePercentage
from coingecko-sdk.models.coins_data_base_market_data_ath_date import CoinsDataBaseMarketDataAthDate
from coingecko-sdk.models.coins_data_base_market_data_atl import CoinsDataBaseMarketDataAtl
from coingecko-sdk.models.coins_data_base_market_data_atl_change_percentage import CoinsDataBaseMarketDataAtlChangePercentage
from coingecko-sdk.models.coins_data_base_market_data_atl_date import CoinsDataBaseMarketDataAtlDate
from coingecko-sdk.models.coins_data_base_market_data_current_price import CoinsDataBaseMarketDataCurrentPrice
from coingecko-sdk.models.coins_data_base_market_data_fully_diluted_valuation import CoinsDataBaseMarketDataFullyDilutedValuation
from coingecko-sdk.models.coins_data_base_market_data_high24h import CoinsDataBaseMarketDataHigh24h
from coingecko-sdk.models.coins_data_base_market_data_low24h import CoinsDataBaseMarketDataLow24h
from coingecko-sdk.models.coins_data_base_market_data_market_cap import CoinsDataBaseMarketDataMarketCap
from coingecko-sdk.models.coins_data_base_market_data_market_cap_change24h_in_currency import CoinsDataBaseMarketDataMarketCapChange24hInCurrency
from coingecko-sdk.models.coins_data_base_market_data_market_cap_change_percentage24h_in_currency import CoinsDataBaseMarketDataMarketCapChangePercentage24hInCurrency
from coingecko-sdk.models.coins_data_base_market_data_price_change_percentage14d_in_currency import CoinsDataBaseMarketDataPriceChangePercentage14dInCurrency
from coingecko-sdk.models.coins_data_base_market_data_price_change_percentage1h_in_currency import CoinsDataBaseMarketDataPriceChangePercentage1hInCurrency
from coingecko-sdk.models.coins_data_base_market_data_price_change_percentage1y_in_currency import CoinsDataBaseMarketDataPriceChangePercentage1yInCurrency
from coingecko-sdk.models.coins_data_base_market_data_price_change_percentage200d_in_currency import CoinsDataBaseMarketDataPriceChangePercentage200dInCurrency
from coingecko-sdk.models.coins_data_base_market_data_price_change_percentage24h_in_currency import CoinsDataBaseMarketDataPriceChangePercentage24hInCurrency
from coingecko-sdk.models.coins_data_base_market_data_price_change_percentage30d_in_currency import CoinsDataBaseMarketDataPriceChangePercentage30dInCurrency
from coingecko-sdk.models.coins_data_base_market_data_price_change_percentage60d_in_currency import CoinsDataBaseMarketDataPriceChangePercentage60dInCurrency
from coingecko-sdk.models.coins_data_base_market_data_price_change_percentage7d_in_currency import CoinsDataBaseMarketDataPriceChangePercentage7dInCurrency
from coingecko-sdk.models.coins_data_base_market_data_total_volume import CoinsDataBaseMarketDataTotalVolume
from typing import Optional, Set
from typing_extensions import Self

class CoinsDataBaseMarketData(BaseModel):
    """
    coin market data
    """ # noqa: E501
    current_price: Optional[CoinsDataBaseMarketDataCurrentPrice] = None
    total_value_locked: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total value locked")
    mcap_to_tvl_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="market cap to total value locked ratio")
    fdv_to_tvl_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="fully diluted valuation to total value locked ratio")
    roi: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin return on investment")
    ath: Optional[CoinsDataBaseMarketDataAth] = None
    ath_change_percentage: Optional[CoinsDataBaseMarketDataAthChangePercentage] = None
    ath_date: Optional[CoinsDataBaseMarketDataAthDate] = None
    atl: Optional[CoinsDataBaseMarketDataAtl] = None
    atl_change_percentage: Optional[CoinsDataBaseMarketDataAtlChangePercentage] = None
    atl_date: Optional[CoinsDataBaseMarketDataAtlDate] = None
    market_cap: Optional[CoinsDataBaseMarketDataMarketCap] = None
    market_cap_rank: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin rank by market cap")
    fully_diluted_valuation: Optional[CoinsDataBaseMarketDataFullyDilutedValuation] = None
    market_cap_fdv_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="market cap to fully diluted valuation ratio")
    total_volume: Optional[CoinsDataBaseMarketDataTotalVolume] = None
    high_24h: Optional[CoinsDataBaseMarketDataHigh24h] = None
    low_24h: Optional[CoinsDataBaseMarketDataLow24h] = None
    price_change_24h: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin 24hr price change in currency")
    price_change_percentage_24h: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin 24hr price change in percentage")
    price_change_percentage_7d: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin 7d price change in percentage")
    price_change_percentage_14d: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin 14d price change in percentage")
    price_change_percentage_30d: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin 30d price change in percentage")
    price_change_percentage_60d: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin 60d price change in percentage")
    price_change_percentage_200d: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin 200d price change in percentage")
    price_change_percentage_1y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin 1y price change in percentage")
    market_cap_change_24h: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin 24hr market cap change in currency")
    market_cap_change_percentage_24h: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin 24hr market cap change in percentage")
    price_change_percentage_1h_in_currency: Optional[CoinsDataBaseMarketDataPriceChangePercentage1hInCurrency] = None
    price_change_percentage_24h_in_currency: Optional[CoinsDataBaseMarketDataPriceChangePercentage24hInCurrency] = None
    price_change_percentage_7d_in_currency: Optional[CoinsDataBaseMarketDataPriceChangePercentage7dInCurrency] = None
    price_change_percentage_14d_in_currency: Optional[CoinsDataBaseMarketDataPriceChangePercentage14dInCurrency] = None
    price_change_percentage_30d_in_currency: Optional[CoinsDataBaseMarketDataPriceChangePercentage30dInCurrency] = None
    price_change_percentage_60d_in_currency: Optional[CoinsDataBaseMarketDataPriceChangePercentage60dInCurrency] = None
    price_change_percentage_200d_in_currency: Optional[CoinsDataBaseMarketDataPriceChangePercentage200dInCurrency] = None
    price_change_percentage_1y_in_currency: Optional[CoinsDataBaseMarketDataPriceChangePercentage1yInCurrency] = None
    market_cap_change_24h_in_currency: Optional[CoinsDataBaseMarketDataMarketCapChange24hInCurrency] = None
    market_cap_change_percentage_24h_in_currency: Optional[CoinsDataBaseMarketDataMarketCapChangePercentage24hInCurrency] = None
    total_supply: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin total supply")
    max_supply: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin max supply")
    circulating_supply: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin circulating supply")
    last_updated: Optional[datetime] = Field(default=None, description="coin market data last updated timestamp")
    __properties: ClassVar[List[str]] = ["current_price", "total_value_locked", "mcap_to_tvl_ratio", "fdv_to_tvl_ratio", "roi", "ath", "ath_change_percentage", "ath_date", "atl", "atl_change_percentage", "atl_date", "market_cap", "market_cap_rank", "fully_diluted_valuation", "market_cap_fdv_ratio", "total_volume", "high_24h", "low_24h", "price_change_24h", "price_change_percentage_24h", "price_change_percentage_7d", "price_change_percentage_14d", "price_change_percentage_30d", "price_change_percentage_60d", "price_change_percentage_200d", "price_change_percentage_1y", "market_cap_change_24h", "market_cap_change_percentage_24h", "price_change_percentage_1h_in_currency", "price_change_percentage_24h_in_currency", "price_change_percentage_7d_in_currency", "price_change_percentage_14d_in_currency", "price_change_percentage_30d_in_currency", "price_change_percentage_60d_in_currency", "price_change_percentage_200d_in_currency", "price_change_percentage_1y_in_currency", "market_cap_change_24h_in_currency", "market_cap_change_percentage_24h_in_currency", "total_supply", "max_supply", "circulating_supply", "last_updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoinsDataBaseMarketData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_price
        if self.current_price:
            _dict['current_price'] = self.current_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ath
        if self.ath:
            _dict['ath'] = self.ath.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ath_change_percentage
        if self.ath_change_percentage:
            _dict['ath_change_percentage'] = self.ath_change_percentage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ath_date
        if self.ath_date:
            _dict['ath_date'] = self.ath_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of atl
        if self.atl:
            _dict['atl'] = self.atl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of atl_change_percentage
        if self.atl_change_percentage:
            _dict['atl_change_percentage'] = self.atl_change_percentage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of atl_date
        if self.atl_date:
            _dict['atl_date'] = self.atl_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of market_cap
        if self.market_cap:
            _dict['market_cap'] = self.market_cap.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fully_diluted_valuation
        if self.fully_diluted_valuation:
            _dict['fully_diluted_valuation'] = self.fully_diluted_valuation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_volume
        if self.total_volume:
            _dict['total_volume'] = self.total_volume.to_dict()
        # override the default output from pydantic by calling `to_dict()` of high_24h
        if self.high_24h:
            _dict['high_24h'] = self.high_24h.to_dict()
        # override the default output from pydantic by calling `to_dict()` of low_24h
        if self.low_24h:
            _dict['low_24h'] = self.low_24h.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_change_percentage_1h_in_currency
        if self.price_change_percentage_1h_in_currency:
            _dict['price_change_percentage_1h_in_currency'] = self.price_change_percentage_1h_in_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_change_percentage_24h_in_currency
        if self.price_change_percentage_24h_in_currency:
            _dict['price_change_percentage_24h_in_currency'] = self.price_change_percentage_24h_in_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_change_percentage_7d_in_currency
        if self.price_change_percentage_7d_in_currency:
            _dict['price_change_percentage_7d_in_currency'] = self.price_change_percentage_7d_in_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_change_percentage_14d_in_currency
        if self.price_change_percentage_14d_in_currency:
            _dict['price_change_percentage_14d_in_currency'] = self.price_change_percentage_14d_in_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_change_percentage_30d_in_currency
        if self.price_change_percentage_30d_in_currency:
            _dict['price_change_percentage_30d_in_currency'] = self.price_change_percentage_30d_in_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_change_percentage_60d_in_currency
        if self.price_change_percentage_60d_in_currency:
            _dict['price_change_percentage_60d_in_currency'] = self.price_change_percentage_60d_in_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_change_percentage_200d_in_currency
        if self.price_change_percentage_200d_in_currency:
            _dict['price_change_percentage_200d_in_currency'] = self.price_change_percentage_200d_in_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_change_percentage_1y_in_currency
        if self.price_change_percentage_1y_in_currency:
            _dict['price_change_percentage_1y_in_currency'] = self.price_change_percentage_1y_in_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of market_cap_change_24h_in_currency
        if self.market_cap_change_24h_in_currency:
            _dict['market_cap_change_24h_in_currency'] = self.market_cap_change_24h_in_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of market_cap_change_percentage_24h_in_currency
        if self.market_cap_change_percentage_24h_in_currency:
            _dict['market_cap_change_percentage_24h_in_currency'] = self.market_cap_change_percentage_24h_in_currency.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoinsDataBaseMarketData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "current_price": CoinsDataBaseMarketDataCurrentPrice.from_dict(obj["current_price"]) if obj.get("current_price") is not None else None,
            "total_value_locked": obj.get("total_value_locked"),
            "mcap_to_tvl_ratio": obj.get("mcap_to_tvl_ratio"),
            "fdv_to_tvl_ratio": obj.get("fdv_to_tvl_ratio"),
            "roi": obj.get("roi"),
            "ath": CoinsDataBaseMarketDataAth.from_dict(obj["ath"]) if obj.get("ath") is not None else None,
            "ath_change_percentage": CoinsDataBaseMarketDataAthChangePercentage.from_dict(obj["ath_change_percentage"]) if obj.get("ath_change_percentage") is not None else None,
            "ath_date": CoinsDataBaseMarketDataAthDate.from_dict(obj["ath_date"]) if obj.get("ath_date") is not None else None,
            "atl": CoinsDataBaseMarketDataAtl.from_dict(obj["atl"]) if obj.get("atl") is not None else None,
            "atl_change_percentage": CoinsDataBaseMarketDataAtlChangePercentage.from_dict(obj["atl_change_percentage"]) if obj.get("atl_change_percentage") is not None else None,
            "atl_date": CoinsDataBaseMarketDataAtlDate.from_dict(obj["atl_date"]) if obj.get("atl_date") is not None else None,
            "market_cap": CoinsDataBaseMarketDataMarketCap.from_dict(obj["market_cap"]) if obj.get("market_cap") is not None else None,
            "market_cap_rank": obj.get("market_cap_rank"),
            "fully_diluted_valuation": CoinsDataBaseMarketDataFullyDilutedValuation.from_dict(obj["fully_diluted_valuation"]) if obj.get("fully_diluted_valuation") is not None else None,
            "market_cap_fdv_ratio": obj.get("market_cap_fdv_ratio"),
            "total_volume": CoinsDataBaseMarketDataTotalVolume.from_dict(obj["total_volume"]) if obj.get("total_volume") is not None else None,
            "high_24h": CoinsDataBaseMarketDataHigh24h.from_dict(obj["high_24h"]) if obj.get("high_24h") is not None else None,
            "low_24h": CoinsDataBaseMarketDataLow24h.from_dict(obj["low_24h"]) if obj.get("low_24h") is not None else None,
            "price_change_24h": obj.get("price_change_24h"),
            "price_change_percentage_24h": obj.get("price_change_percentage_24h"),
            "price_change_percentage_7d": obj.get("price_change_percentage_7d"),
            "price_change_percentage_14d": obj.get("price_change_percentage_14d"),
            "price_change_percentage_30d": obj.get("price_change_percentage_30d"),
            "price_change_percentage_60d": obj.get("price_change_percentage_60d"),
            "price_change_percentage_200d": obj.get("price_change_percentage_200d"),
            "price_change_percentage_1y": obj.get("price_change_percentage_1y"),
            "market_cap_change_24h": obj.get("market_cap_change_24h"),
            "market_cap_change_percentage_24h": obj.get("market_cap_change_percentage_24h"),
            "price_change_percentage_1h_in_currency": CoinsDataBaseMarketDataPriceChangePercentage1hInCurrency.from_dict(obj["price_change_percentage_1h_in_currency"]) if obj.get("price_change_percentage_1h_in_currency") is not None else None,
            "price_change_percentage_24h_in_currency": CoinsDataBaseMarketDataPriceChangePercentage24hInCurrency.from_dict(obj["price_change_percentage_24h_in_currency"]) if obj.get("price_change_percentage_24h_in_currency") is not None else None,
            "price_change_percentage_7d_in_currency": CoinsDataBaseMarketDataPriceChangePercentage7dInCurrency.from_dict(obj["price_change_percentage_7d_in_currency"]) if obj.get("price_change_percentage_7d_in_currency") is not None else None,
            "price_change_percentage_14d_in_currency": CoinsDataBaseMarketDataPriceChangePercentage14dInCurrency.from_dict(obj["price_change_percentage_14d_in_currency"]) if obj.get("price_change_percentage_14d_in_currency") is not None else None,
            "price_change_percentage_30d_in_currency": CoinsDataBaseMarketDataPriceChangePercentage30dInCurrency.from_dict(obj["price_change_percentage_30d_in_currency"]) if obj.get("price_change_percentage_30d_in_currency") is not None else None,
            "price_change_percentage_60d_in_currency": CoinsDataBaseMarketDataPriceChangePercentage60dInCurrency.from_dict(obj["price_change_percentage_60d_in_currency"]) if obj.get("price_change_percentage_60d_in_currency") is not None else None,
            "price_change_percentage_200d_in_currency": CoinsDataBaseMarketDataPriceChangePercentage200dInCurrency.from_dict(obj["price_change_percentage_200d_in_currency"]) if obj.get("price_change_percentage_200d_in_currency") is not None else None,
            "price_change_percentage_1y_in_currency": CoinsDataBaseMarketDataPriceChangePercentage1yInCurrency.from_dict(obj["price_change_percentage_1y_in_currency"]) if obj.get("price_change_percentage_1y_in_currency") is not None else None,
            "market_cap_change_24h_in_currency": CoinsDataBaseMarketDataMarketCapChange24hInCurrency.from_dict(obj["market_cap_change_24h_in_currency"]) if obj.get("market_cap_change_24h_in_currency") is not None else None,
            "market_cap_change_percentage_24h_in_currency": CoinsDataBaseMarketDataMarketCapChangePercentage24hInCurrency.from_dict(obj["market_cap_change_percentage_24h_in_currency"]) if obj.get("market_cap_change_percentage_24h_in_currency") is not None else None,
            "total_supply": obj.get("total_supply"),
            "max_supply": obj.get("max_supply"),
            "circulating_supply": obj.get("circulating_supply"),
            "last_updated": obj.get("last_updated")
        })
        return _obj


