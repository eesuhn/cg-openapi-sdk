# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from coingecko-sdk.models.coins_data_base_community_data import CoinsDataBaseCommunityData
from coingecko-sdk.models.coins_data_base_developer_data import CoinsDataBaseDeveloperData
from coingecko-sdk.models.coins_data_base_image import CoinsDataBaseImage
from coingecko-sdk.models.coins_data_base_links import CoinsDataBaseLinks
from coingecko-sdk.models.coins_data_base_market_data import CoinsDataBaseMarketData
from coingecko-sdk.models.coins_data_base_tickers_inner import CoinsDataBaseTickersInner
from typing import Optional, Set
from typing_extensions import Self

class CoinsID(BaseModel):
    """
    CoinsID
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="coin ID")
    symbol: Optional[StrictStr] = Field(default=None, description="coin symbol")
    name: Optional[StrictStr] = Field(default=None, description="coin name")
    web_slug: Optional[StrictStr] = Field(default=None, description="coin web slug")
    asset_platform_id: Optional[StrictStr] = Field(default=None, description="coin asset platform ID")
    platforms: Optional[Dict[str, StrictStr]] = Field(default=None, description="coin asset platform and contract address")
    detail_platforms: Optional[Dict[str, StrictStr]] = Field(default=None, description="detailed coin asset platform and contract address")
    block_time_in_minutes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="blockchain block time in minutes")
    hashing_algorithm: Optional[StrictStr] = Field(default=None, description="blockchain hashing algorithm")
    categories: Optional[List[StrictStr]] = Field(default=None, description="coin categories")
    preview_listing: Optional[StrictBool] = Field(default=None, description="preview listing coin")
    public_notice: Optional[StrictStr] = Field(default=None, description="public notice")
    additional_notices: Optional[List[StrictStr]] = Field(default=None, description="additional notices")
    localization: Optional[Dict[str, StrictStr]] = Field(default=None, description="coin name localization")
    description: Optional[Dict[str, StrictStr]] = Field(default=None, description="coin description")
    links: Optional[CoinsDataBaseLinks] = None
    image: Optional[CoinsDataBaseImage] = None
    country_origin: Optional[StrictStr] = Field(default=None, description="coin country of origin")
    genesis_date: Optional[datetime] = Field(default=None, description="coin genesis date")
    sentiment_votes_up_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin sentiment votes up percentage")
    sentiment_votes_down_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin sentiment votes down percentage")
    market_cap_rank: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin rank by market cap")
    market_data: Optional[CoinsDataBaseMarketData] = None
    community_data: Optional[CoinsDataBaseCommunityData] = None
    developer_data: Optional[CoinsDataBaseDeveloperData] = None
    status_updates: Optional[List[Dict[str, Any]]] = Field(default=None, description="coin status updates")
    last_updated: Optional[datetime] = Field(default=None, description="coin last updated timestamp")
    tickers: Optional[List[CoinsDataBaseTickersInner]] = Field(default=None, description="coin tickers")
    __properties: ClassVar[List[str]] = ["id", "symbol", "name", "web_slug", "asset_platform_id", "platforms", "detail_platforms", "block_time_in_minutes", "hashing_algorithm", "categories", "preview_listing", "public_notice", "additional_notices", "localization", "description", "links", "image", "country_origin", "genesis_date", "sentiment_votes_up_percentage", "sentiment_votes_down_percentage", "market_cap_rank", "market_data", "community_data", "developer_data", "status_updates", "last_updated", "tickers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoinsID from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of market_data
        if self.market_data:
            _dict['market_data'] = self.market_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of community_data
        if self.community_data:
            _dict['community_data'] = self.community_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of developer_data
        if self.developer_data:
            _dict['developer_data'] = self.developer_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tickers (list)
        _items = []
        if self.tickers:
            for _item_tickers in self.tickers:
                if _item_tickers:
                    _items.append(_item_tickers.to_dict())
            _dict['tickers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoinsID from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "symbol": obj.get("symbol"),
            "name": obj.get("name"),
            "web_slug": obj.get("web_slug"),
            "asset_platform_id": obj.get("asset_platform_id"),
            "platforms": obj.get("platforms"),
            "detail_platforms": obj.get("detail_platforms"),
            "block_time_in_minutes": obj.get("block_time_in_minutes"),
            "hashing_algorithm": obj.get("hashing_algorithm"),
            "categories": obj.get("categories"),
            "preview_listing": obj.get("preview_listing"),
            "public_notice": obj.get("public_notice"),
            "additional_notices": obj.get("additional_notices"),
            "localization": obj.get("localization"),
            "description": obj.get("description"),
            "links": CoinsDataBaseLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "image": CoinsDataBaseImage.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "country_origin": obj.get("country_origin"),
            "genesis_date": obj.get("genesis_date"),
            "sentiment_votes_up_percentage": obj.get("sentiment_votes_up_percentage"),
            "sentiment_votes_down_percentage": obj.get("sentiment_votes_down_percentage"),
            "market_cap_rank": obj.get("market_cap_rank"),
            "market_data": CoinsDataBaseMarketData.from_dict(obj["market_data"]) if obj.get("market_data") is not None else None,
            "community_data": CoinsDataBaseCommunityData.from_dict(obj["community_data"]) if obj.get("community_data") is not None else None,
            "developer_data": CoinsDataBaseDeveloperData.from_dict(obj["developer_data"]) if obj.get("developer_data") is not None else None,
            "status_updates": obj.get("status_updates"),
            "last_updated": obj.get("last_updated"),
            "tickers": [CoinsDataBaseTickersInner.from_dict(_item) for _item in obj["tickers"]] if obj.get("tickers") is not None else None
        })
        return _obj


