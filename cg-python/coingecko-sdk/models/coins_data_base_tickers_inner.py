# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from coingecko-sdk.models.coins_data_base_tickers_inner_converted_last import CoinsDataBaseTickersInnerConvertedLast
from coingecko-sdk.models.coins_data_base_tickers_inner_converted_volume import CoinsDataBaseTickersInnerConvertedVolume
from coingecko-sdk.models.coins_data_base_tickers_inner_market import CoinsDataBaseTickersInnerMarket
from typing import Optional, Set
from typing_extensions import Self

class CoinsDataBaseTickersInner(BaseModel):
    """
    CoinsDataBaseTickersInner
    """ # noqa: E501
    base: Optional[StrictStr] = Field(default=None, description="coin ticker base currency")
    target: Optional[StrictStr] = Field(default=None, description="coin ticker target currency")
    market: Optional[CoinsDataBaseTickersInnerMarket] = None
    last: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin ticker last price")
    volume: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin ticker volume")
    converted_last: Optional[CoinsDataBaseTickersInnerConvertedLast] = None
    converted_volume: Optional[CoinsDataBaseTickersInnerConvertedVolume] = None
    trust_score: Optional[StrictStr] = Field(default=None, description="coin ticker trust score")
    bid_ask_spread_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin ticker bid ask spread percentage")
    timestamp: Optional[datetime] = Field(default=None, description="coin ticker timestamp")
    last_traded_at: Optional[datetime] = Field(default=None, description="coin ticker last traded timestamp")
    last_fetch_at: Optional[datetime] = Field(default=None, description="coin ticker last fetch timestamp")
    is_anomaly: Optional[StrictBool] = Field(default=None, description="coin ticker anomaly")
    is_stale: Optional[StrictBool] = Field(default=None, description="coin ticker stale")
    trade_url: Optional[StrictStr] = Field(default=None, description="coin ticker trade url")
    token_info_url: Optional[StrictStr] = Field(default=None, description="coin ticker token info url")
    coin_id: Optional[StrictStr] = Field(default=None, description="coin ticker base currency coin ID")
    target_coin_id: Optional[StrictStr] = Field(default=None, description="coin ticker target currency coin ID")
    __properties: ClassVar[List[str]] = ["base", "target", "market", "last", "volume", "converted_last", "converted_volume", "trust_score", "bid_ask_spread_percentage", "timestamp", "last_traded_at", "last_fetch_at", "is_anomaly", "is_stale", "trade_url", "token_info_url", "coin_id", "target_coin_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoinsDataBaseTickersInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of market
        if self.market:
            _dict['market'] = self.market.to_dict()
        # override the default output from pydantic by calling `to_dict()` of converted_last
        if self.converted_last:
            _dict['converted_last'] = self.converted_last.to_dict()
        # override the default output from pydantic by calling `to_dict()` of converted_volume
        if self.converted_volume:
            _dict['converted_volume'] = self.converted_volume.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoinsDataBaseTickersInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base": obj.get("base"),
            "target": obj.get("target"),
            "market": CoinsDataBaseTickersInnerMarket.from_dict(obj["market"]) if obj.get("market") is not None else None,
            "last": obj.get("last"),
            "volume": obj.get("volume"),
            "converted_last": CoinsDataBaseTickersInnerConvertedLast.from_dict(obj["converted_last"]) if obj.get("converted_last") is not None else None,
            "converted_volume": CoinsDataBaseTickersInnerConvertedVolume.from_dict(obj["converted_volume"]) if obj.get("converted_volume") is not None else None,
            "trust_score": obj.get("trust_score"),
            "bid_ask_spread_percentage": obj.get("bid_ask_spread_percentage"),
            "timestamp": obj.get("timestamp"),
            "last_traded_at": obj.get("last_traded_at"),
            "last_fetch_at": obj.get("last_fetch_at"),
            "is_anomaly": obj.get("is_anomaly"),
            "is_stale": obj.get("is_stale"),
            "trade_url": obj.get("trade_url"),
            "token_info_url": obj.get("token_info_url"),
            "coin_id": obj.get("coin_id"),
            "target_coin_id": obj.get("target_coin_id")
        })
        return _obj


