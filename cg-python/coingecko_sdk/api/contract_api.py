# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from coingecko_sdk.models.coins_contract_address import CoinsContractAddress
from coingecko_sdk.models.coins_market_chart import CoinsMarketChart
from coingecko_sdk.models.coins_market_chart_range import CoinsMarketChartRange

from coingecko_sdk.api_client import ApiClient, RequestSerialized
from coingecko_sdk.api_response import ApiResponse
from coingecko_sdk.rest import RESTResponseType


class ContractApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def coins_contract_address(
        self,
        id: Annotated[StrictStr, Field(description="asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list).")],
        contract_address: Annotated[StrictStr, Field(description="the contract address of token")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CoinsContractAddress:
        """Coin Data by Token Address

        This endpoint allows you to **query all the metadata (image,  websites, socials, description, contract address, etc.) and  market data (price, ATH, exchange tickers, etc.) of a coin  from the CoinGecko coin page based on an asset platform and  a particular token contract address**

        :param id: asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list). (required)
        :type id: str
        :param contract_address: the contract address of token (required)
        :type contract_address: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._coins_contract_address_serialize(
            id=id,
            contract_address=contract_address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CoinsContractAddress",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def coins_contract_address_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list).")],
        contract_address: Annotated[StrictStr, Field(description="the contract address of token")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CoinsContractAddress]:
        """Coin Data by Token Address

        This endpoint allows you to **query all the metadata (image,  websites, socials, description, contract address, etc.) and  market data (price, ATH, exchange tickers, etc.) of a coin  from the CoinGecko coin page based on an asset platform and  a particular token contract address**

        :param id: asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list). (required)
        :type id: str
        :param contract_address: the contract address of token (required)
        :type contract_address: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._coins_contract_address_serialize(
            id=id,
            contract_address=contract_address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CoinsContractAddress",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def coins_contract_address_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list).")],
        contract_address: Annotated[StrictStr, Field(description="the contract address of token")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Coin Data by Token Address

        This endpoint allows you to **query all the metadata (image,  websites, socials, description, contract address, etc.) and  market data (price, ATH, exchange tickers, etc.) of a coin  from the CoinGecko coin page based on an asset platform and  a particular token contract address**

        :param id: asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list). (required)
        :type id: str
        :param contract_address: the contract address of token (required)
        :type contract_address: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._coins_contract_address_serialize(
            id=id,
            contract_address=contract_address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CoinsContractAddress",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _coins_contract_address_serialize(
        self,
        id,
        contract_address,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if contract_address is not None:
            _path_params['contract_address'] = contract_address
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'proKeyAuth', 
            'demoKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/coins/{id}/contract/{contract_address}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def contract_address_market_chart(
        self,
        id: Annotated[StrictStr, Field(description="asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list).")],
        contract_address: Annotated[StrictStr, Field(description="the contract address of token")],
        vs_currency: Annotated[StrictStr, Field(description="target currency of market data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).")],
        days: Annotated[StrictStr, Field(description="data up to number of days ago <br> You may use any integer or `max` for number of days")],
        interval: Annotated[Optional[StrictStr], Field(description="data interval, leave empty for auto granularity")] = None,
        precision: Annotated[Optional[StrictStr], Field(description="decimal place for currency price value")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CoinsMarketChart:
        """Coin Historical Chart Data by Token Address

        This endpoint allows you to **get the historical chart data including time in UNIX, price, market cap and 24hr volume based on asset platform and particular token contract address**

        :param id: asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list). (required)
        :type id: str
        :param contract_address: the contract address of token (required)
        :type contract_address: str
        :param vs_currency: target currency of market data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies). (required)
        :type vs_currency: str
        :param days: data up to number of days ago <br> You may use any integer or `max` for number of days (required)
        :type days: str
        :param interval: data interval, leave empty for auto granularity
        :type interval: str
        :param precision: decimal place for currency price value
        :type precision: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._contract_address_market_chart_serialize(
            id=id,
            contract_address=contract_address,
            vs_currency=vs_currency,
            days=days,
            interval=interval,
            precision=precision,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CoinsMarketChart",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def contract_address_market_chart_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list).")],
        contract_address: Annotated[StrictStr, Field(description="the contract address of token")],
        vs_currency: Annotated[StrictStr, Field(description="target currency of market data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).")],
        days: Annotated[StrictStr, Field(description="data up to number of days ago <br> You may use any integer or `max` for number of days")],
        interval: Annotated[Optional[StrictStr], Field(description="data interval, leave empty for auto granularity")] = None,
        precision: Annotated[Optional[StrictStr], Field(description="decimal place for currency price value")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CoinsMarketChart]:
        """Coin Historical Chart Data by Token Address

        This endpoint allows you to **get the historical chart data including time in UNIX, price, market cap and 24hr volume based on asset platform and particular token contract address**

        :param id: asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list). (required)
        :type id: str
        :param contract_address: the contract address of token (required)
        :type contract_address: str
        :param vs_currency: target currency of market data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies). (required)
        :type vs_currency: str
        :param days: data up to number of days ago <br> You may use any integer or `max` for number of days (required)
        :type days: str
        :param interval: data interval, leave empty for auto granularity
        :type interval: str
        :param precision: decimal place for currency price value
        :type precision: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._contract_address_market_chart_serialize(
            id=id,
            contract_address=contract_address,
            vs_currency=vs_currency,
            days=days,
            interval=interval,
            precision=precision,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CoinsMarketChart",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def contract_address_market_chart_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list).")],
        contract_address: Annotated[StrictStr, Field(description="the contract address of token")],
        vs_currency: Annotated[StrictStr, Field(description="target currency of market data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).")],
        days: Annotated[StrictStr, Field(description="data up to number of days ago <br> You may use any integer or `max` for number of days")],
        interval: Annotated[Optional[StrictStr], Field(description="data interval, leave empty for auto granularity")] = None,
        precision: Annotated[Optional[StrictStr], Field(description="decimal place for currency price value")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Coin Historical Chart Data by Token Address

        This endpoint allows you to **get the historical chart data including time in UNIX, price, market cap and 24hr volume based on asset platform and particular token contract address**

        :param id: asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list). (required)
        :type id: str
        :param contract_address: the contract address of token (required)
        :type contract_address: str
        :param vs_currency: target currency of market data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies). (required)
        :type vs_currency: str
        :param days: data up to number of days ago <br> You may use any integer or `max` for number of days (required)
        :type days: str
        :param interval: data interval, leave empty for auto granularity
        :type interval: str
        :param precision: decimal place for currency price value
        :type precision: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._contract_address_market_chart_serialize(
            id=id,
            contract_address=contract_address,
            vs_currency=vs_currency,
            days=days,
            interval=interval,
            precision=precision,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CoinsMarketChart",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _contract_address_market_chart_serialize(
        self,
        id,
        contract_address,
        vs_currency,
        days,
        interval,
        precision,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if contract_address is not None:
            _path_params['contract_address'] = contract_address
        # process the query parameters
        if vs_currency is not None:
            
            _query_params.append(('vs_currency', vs_currency))
            
        if days is not None:
            
            _query_params.append(('days', days))
            
        if interval is not None:
            
            _query_params.append(('interval', interval))
            
        if precision is not None:
            
            _query_params.append(('precision', precision))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'proKeyAuth', 
            'demoKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/coins/{id}/contract/{contract_address}/market_chart',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def contract_address_market_chart_range(
        self,
        id: Annotated[StrictStr, Field(description="asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list)")],
        contract_address: Annotated[StrictStr, Field(description="the contract address of token")],
        vs_currency: Annotated[StrictStr, Field(description="target currency of market data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).")],
        var_from: Annotated[Union[StrictFloat, StrictInt], Field(description="starting date in UNIX timestamp")],
        to: Annotated[Union[StrictFloat, StrictInt], Field(description="ending date in UNIX timestamp")],
        interval: Annotated[Optional[StrictStr], Field(description="data interval, leave empty for auto granularity")] = None,
        precision: Annotated[Optional[StrictStr], Field(description="decimal place for currency price value")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CoinsMarketChartRange:
        """Coin Historical Chart Data within Time Range by Token Address

        This endpoint allows you to **get the historical chart data within certain time range in UNIX along with price, market cap and 24hr volume based on asset platform and particular token contract address**

        :param id: asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list) (required)
        :type id: str
        :param contract_address: the contract address of token (required)
        :type contract_address: str
        :param vs_currency: target currency of market data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies). (required)
        :type vs_currency: str
        :param var_from: starting date in UNIX timestamp (required)
        :type var_from: float
        :param to: ending date in UNIX timestamp (required)
        :type to: float
        :param interval: data interval, leave empty for auto granularity
        :type interval: str
        :param precision: decimal place for currency price value
        :type precision: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._contract_address_market_chart_range_serialize(
            id=id,
            contract_address=contract_address,
            vs_currency=vs_currency,
            var_from=var_from,
            to=to,
            interval=interval,
            precision=precision,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CoinsMarketChartRange",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def contract_address_market_chart_range_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list)")],
        contract_address: Annotated[StrictStr, Field(description="the contract address of token")],
        vs_currency: Annotated[StrictStr, Field(description="target currency of market data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).")],
        var_from: Annotated[Union[StrictFloat, StrictInt], Field(description="starting date in UNIX timestamp")],
        to: Annotated[Union[StrictFloat, StrictInt], Field(description="ending date in UNIX timestamp")],
        interval: Annotated[Optional[StrictStr], Field(description="data interval, leave empty for auto granularity")] = None,
        precision: Annotated[Optional[StrictStr], Field(description="decimal place for currency price value")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CoinsMarketChartRange]:
        """Coin Historical Chart Data within Time Range by Token Address

        This endpoint allows you to **get the historical chart data within certain time range in UNIX along with price, market cap and 24hr volume based on asset platform and particular token contract address**

        :param id: asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list) (required)
        :type id: str
        :param contract_address: the contract address of token (required)
        :type contract_address: str
        :param vs_currency: target currency of market data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies). (required)
        :type vs_currency: str
        :param var_from: starting date in UNIX timestamp (required)
        :type var_from: float
        :param to: ending date in UNIX timestamp (required)
        :type to: float
        :param interval: data interval, leave empty for auto granularity
        :type interval: str
        :param precision: decimal place for currency price value
        :type precision: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._contract_address_market_chart_range_serialize(
            id=id,
            contract_address=contract_address,
            vs_currency=vs_currency,
            var_from=var_from,
            to=to,
            interval=interval,
            precision=precision,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CoinsMarketChartRange",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def contract_address_market_chart_range_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list)")],
        contract_address: Annotated[StrictStr, Field(description="the contract address of token")],
        vs_currency: Annotated[StrictStr, Field(description="target currency of market data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).")],
        var_from: Annotated[Union[StrictFloat, StrictInt], Field(description="starting date in UNIX timestamp")],
        to: Annotated[Union[StrictFloat, StrictInt], Field(description="ending date in UNIX timestamp")],
        interval: Annotated[Optional[StrictStr], Field(description="data interval, leave empty for auto granularity")] = None,
        precision: Annotated[Optional[StrictStr], Field(description="decimal place for currency price value")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Coin Historical Chart Data within Time Range by Token Address

        This endpoint allows you to **get the historical chart data within certain time range in UNIX along with price, market cap and 24hr volume based on asset platform and particular token contract address**

        :param id: asset platform ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list) (required)
        :type id: str
        :param contract_address: the contract address of token (required)
        :type contract_address: str
        :param vs_currency: target currency of market data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies). (required)
        :type vs_currency: str
        :param var_from: starting date in UNIX timestamp (required)
        :type var_from: float
        :param to: ending date in UNIX timestamp (required)
        :type to: float
        :param interval: data interval, leave empty for auto granularity
        :type interval: str
        :param precision: decimal place for currency price value
        :type precision: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._contract_address_market_chart_range_serialize(
            id=id,
            contract_address=contract_address,
            vs_currency=vs_currency,
            var_from=var_from,
            to=to,
            interval=interval,
            precision=precision,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CoinsMarketChartRange",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _contract_address_market_chart_range_serialize(
        self,
        id,
        contract_address,
        vs_currency,
        var_from,
        to,
        interval,
        precision,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if contract_address is not None:
            _path_params['contract_address'] = contract_address
        # process the query parameters
        if vs_currency is not None:
            
            _query_params.append(('vs_currency', vs_currency))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if interval is not None:
            
            _query_params.append(('interval', interval))
            
        if precision is not None:
            
            _query_params.append(('precision', precision))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'proKeyAuth', 
            'demoKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/coins/{id}/contract/{contract_address}/market_chart/range',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


