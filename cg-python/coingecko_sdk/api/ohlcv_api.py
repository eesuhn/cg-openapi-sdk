# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from coingecko_sdk.models.ohlcv import OHLCV

from coingecko_sdk.api_client import ApiClient, RequestSerialized
from coingecko_sdk.api_response import ApiResponse
from coingecko_sdk.rest import RESTResponseType


class OHLCVApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def pool_ohlcv_contract_address(
        self,
        network: Annotated[StrictStr, Field(description="network ID <br> *refers to [/networks](/reference/networks-list)")],
        pool_address: Annotated[StrictStr, Field(description="pool contract address")],
        timeframe: Annotated[StrictStr, Field(description="timeframe of the OHLCV chart")],
        aggregate: Annotated[Optional[StrictStr], Field(description="time period to aggregate each OHLCV <br> Available values (day): `1` <br> Available values (hour): `1` , `4` , `12` <br> Available values (minute): `1` , `5` , `15` <br> Default value: 1")] = None,
        before_timestamp: Annotated[Optional[StrictInt], Field(description="return OHLCV data before this timestamp (integer seconds since epoch)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="number of OHLCV results to return, maximum 1000 <br> Default value: 100")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="return OHLCV in USD or quote token <br> Default value: usd")] = None,
        token: Annotated[Optional[StrictStr], Field(description="return OHLCV for token <br> use this to invert the chart <br> Available values: 'base', 'quote' or token address <br> Default value: 'base'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OHLCV:
        """Pool OHLCV chart by Pool Address

        This endpoint allows you to **get the OHLCV chart (Open, High, Low, Close, Volume) of a pool based on the provided pool address on a network**

        :param network: network ID <br> *refers to [/networks](/reference/networks-list) (required)
        :type network: str
        :param pool_address: pool contract address (required)
        :type pool_address: str
        :param timeframe: timeframe of the OHLCV chart (required)
        :type timeframe: str
        :param aggregate: time period to aggregate each OHLCV <br> Available values (day): `1` <br> Available values (hour): `1` , `4` , `12` <br> Available values (minute): `1` , `5` , `15` <br> Default value: 1
        :type aggregate: str
        :param before_timestamp: return OHLCV data before this timestamp (integer seconds since epoch)
        :type before_timestamp: int
        :param limit: number of OHLCV results to return, maximum 1000 <br> Default value: 100
        :type limit: int
        :param currency: return OHLCV in USD or quote token <br> Default value: usd
        :type currency: str
        :param token: return OHLCV for token <br> use this to invert the chart <br> Available values: 'base', 'quote' or token address <br> Default value: 'base'
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pool_ohlcv_contract_address_serialize(
            network=network,
            pool_address=pool_address,
            timeframe=timeframe,
            aggregate=aggregate,
            before_timestamp=before_timestamp,
            limit=limit,
            currency=currency,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OHLCV",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pool_ohlcv_contract_address_with_http_info(
        self,
        network: Annotated[StrictStr, Field(description="network ID <br> *refers to [/networks](/reference/networks-list)")],
        pool_address: Annotated[StrictStr, Field(description="pool contract address")],
        timeframe: Annotated[StrictStr, Field(description="timeframe of the OHLCV chart")],
        aggregate: Annotated[Optional[StrictStr], Field(description="time period to aggregate each OHLCV <br> Available values (day): `1` <br> Available values (hour): `1` , `4` , `12` <br> Available values (minute): `1` , `5` , `15` <br> Default value: 1")] = None,
        before_timestamp: Annotated[Optional[StrictInt], Field(description="return OHLCV data before this timestamp (integer seconds since epoch)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="number of OHLCV results to return, maximum 1000 <br> Default value: 100")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="return OHLCV in USD or quote token <br> Default value: usd")] = None,
        token: Annotated[Optional[StrictStr], Field(description="return OHLCV for token <br> use this to invert the chart <br> Available values: 'base', 'quote' or token address <br> Default value: 'base'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OHLCV]:
        """Pool OHLCV chart by Pool Address

        This endpoint allows you to **get the OHLCV chart (Open, High, Low, Close, Volume) of a pool based on the provided pool address on a network**

        :param network: network ID <br> *refers to [/networks](/reference/networks-list) (required)
        :type network: str
        :param pool_address: pool contract address (required)
        :type pool_address: str
        :param timeframe: timeframe of the OHLCV chart (required)
        :type timeframe: str
        :param aggregate: time period to aggregate each OHLCV <br> Available values (day): `1` <br> Available values (hour): `1` , `4` , `12` <br> Available values (minute): `1` , `5` , `15` <br> Default value: 1
        :type aggregate: str
        :param before_timestamp: return OHLCV data before this timestamp (integer seconds since epoch)
        :type before_timestamp: int
        :param limit: number of OHLCV results to return, maximum 1000 <br> Default value: 100
        :type limit: int
        :param currency: return OHLCV in USD or quote token <br> Default value: usd
        :type currency: str
        :param token: return OHLCV for token <br> use this to invert the chart <br> Available values: 'base', 'quote' or token address <br> Default value: 'base'
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pool_ohlcv_contract_address_serialize(
            network=network,
            pool_address=pool_address,
            timeframe=timeframe,
            aggregate=aggregate,
            before_timestamp=before_timestamp,
            limit=limit,
            currency=currency,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OHLCV",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pool_ohlcv_contract_address_without_preload_content(
        self,
        network: Annotated[StrictStr, Field(description="network ID <br> *refers to [/networks](/reference/networks-list)")],
        pool_address: Annotated[StrictStr, Field(description="pool contract address")],
        timeframe: Annotated[StrictStr, Field(description="timeframe of the OHLCV chart")],
        aggregate: Annotated[Optional[StrictStr], Field(description="time period to aggregate each OHLCV <br> Available values (day): `1` <br> Available values (hour): `1` , `4` , `12` <br> Available values (minute): `1` , `5` , `15` <br> Default value: 1")] = None,
        before_timestamp: Annotated[Optional[StrictInt], Field(description="return OHLCV data before this timestamp (integer seconds since epoch)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="number of OHLCV results to return, maximum 1000 <br> Default value: 100")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="return OHLCV in USD or quote token <br> Default value: usd")] = None,
        token: Annotated[Optional[StrictStr], Field(description="return OHLCV for token <br> use this to invert the chart <br> Available values: 'base', 'quote' or token address <br> Default value: 'base'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Pool OHLCV chart by Pool Address

        This endpoint allows you to **get the OHLCV chart (Open, High, Low, Close, Volume) of a pool based on the provided pool address on a network**

        :param network: network ID <br> *refers to [/networks](/reference/networks-list) (required)
        :type network: str
        :param pool_address: pool contract address (required)
        :type pool_address: str
        :param timeframe: timeframe of the OHLCV chart (required)
        :type timeframe: str
        :param aggregate: time period to aggregate each OHLCV <br> Available values (day): `1` <br> Available values (hour): `1` , `4` , `12` <br> Available values (minute): `1` , `5` , `15` <br> Default value: 1
        :type aggregate: str
        :param before_timestamp: return OHLCV data before this timestamp (integer seconds since epoch)
        :type before_timestamp: int
        :param limit: number of OHLCV results to return, maximum 1000 <br> Default value: 100
        :type limit: int
        :param currency: return OHLCV in USD or quote token <br> Default value: usd
        :type currency: str
        :param token: return OHLCV for token <br> use this to invert the chart <br> Available values: 'base', 'quote' or token address <br> Default value: 'base'
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pool_ohlcv_contract_address_serialize(
            network=network,
            pool_address=pool_address,
            timeframe=timeframe,
            aggregate=aggregate,
            before_timestamp=before_timestamp,
            limit=limit,
            currency=currency,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OHLCV",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pool_ohlcv_contract_address_serialize(
        self,
        network,
        pool_address,
        timeframe,
        aggregate,
        before_timestamp,
        limit,
        currency,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if network is not None:
            _path_params['network'] = network
        if pool_address is not None:
            _path_params['pool_address'] = pool_address
        if timeframe is not None:
            _path_params['timeframe'] = timeframe
        # process the query parameters
        if aggregate is not None:
            
            _query_params.append(('aggregate', aggregate))
            
        if before_timestamp is not None:
            
            _query_params.append(('before_timestamp', before_timestamp))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if currency is not None:
            
            _query_params.append(('currency', currency))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'proKeyAuth', 
            'demoKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/onchain/networks/{network}/pools/{pool_address}/ohlcv/{timeframe}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


