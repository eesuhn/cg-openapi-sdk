# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from coingecko_sdk.models.onchain_simple_price import OnchainSimplePrice
from coingecko_sdk.models.simple_price import SimplePrice
from coingecko_sdk.models.simple_token_price import SimpleTokenPrice

from coingecko_sdk.api_client import ApiClient, RequestSerialized
from coingecko_sdk.api_response import ApiResponse
from coingecko_sdk.rest import RESTResponseType


class SimpleApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def onchain_simple_price(
        self,
        network: Annotated[StrictStr, Field(description="network ID <br> *refers to [/networks](/reference/networks-list)")],
        addresses: Annotated[StrictStr, Field(description="token contract address, comma-separated if more than one token contract address")],
        include_market_cap: Annotated[Optional[StrictBool], Field(description="include market capitalization, default: false")] = None,
        include_24hr_vol: Annotated[Optional[StrictBool], Field(description="include 24hr volume, default: false")] = None,
        include_24hr_price_change: Annotated[Optional[StrictBool], Field(description="include 24hr price change, default: false")] = None,
        include_total_reserve_in_usd: Annotated[Optional[StrictBool], Field(description="include total reserve in USD, default: false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OnchainSimplePrice:
        """Token Price by Token Addresses

        This endpoint allows you to **get token price based on the provided token contract address on a network**

        :param network: network ID <br> *refers to [/networks](/reference/networks-list) (required)
        :type network: str
        :param addresses: token contract address, comma-separated if more than one token contract address (required)
        :type addresses: str
        :param include_market_cap: include market capitalization, default: false
        :type include_market_cap: bool
        :param include_24hr_vol: include 24hr volume, default: false
        :type include_24hr_vol: bool
        :param include_24hr_price_change: include 24hr price change, default: false
        :type include_24hr_price_change: bool
        :param include_total_reserve_in_usd: include total reserve in USD, default: false
        :type include_total_reserve_in_usd: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._onchain_simple_price_serialize(
            network=network,
            addresses=addresses,
            include_market_cap=include_market_cap,
            include_24hr_vol=include_24hr_vol,
            include_24hr_price_change=include_24hr_price_change,
            include_total_reserve_in_usd=include_total_reserve_in_usd,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnchainSimplePrice",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def onchain_simple_price_with_http_info(
        self,
        network: Annotated[StrictStr, Field(description="network ID <br> *refers to [/networks](/reference/networks-list)")],
        addresses: Annotated[StrictStr, Field(description="token contract address, comma-separated if more than one token contract address")],
        include_market_cap: Annotated[Optional[StrictBool], Field(description="include market capitalization, default: false")] = None,
        include_24hr_vol: Annotated[Optional[StrictBool], Field(description="include 24hr volume, default: false")] = None,
        include_24hr_price_change: Annotated[Optional[StrictBool], Field(description="include 24hr price change, default: false")] = None,
        include_total_reserve_in_usd: Annotated[Optional[StrictBool], Field(description="include total reserve in USD, default: false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OnchainSimplePrice]:
        """Token Price by Token Addresses

        This endpoint allows you to **get token price based on the provided token contract address on a network**

        :param network: network ID <br> *refers to [/networks](/reference/networks-list) (required)
        :type network: str
        :param addresses: token contract address, comma-separated if more than one token contract address (required)
        :type addresses: str
        :param include_market_cap: include market capitalization, default: false
        :type include_market_cap: bool
        :param include_24hr_vol: include 24hr volume, default: false
        :type include_24hr_vol: bool
        :param include_24hr_price_change: include 24hr price change, default: false
        :type include_24hr_price_change: bool
        :param include_total_reserve_in_usd: include total reserve in USD, default: false
        :type include_total_reserve_in_usd: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._onchain_simple_price_serialize(
            network=network,
            addresses=addresses,
            include_market_cap=include_market_cap,
            include_24hr_vol=include_24hr_vol,
            include_24hr_price_change=include_24hr_price_change,
            include_total_reserve_in_usd=include_total_reserve_in_usd,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnchainSimplePrice",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def onchain_simple_price_without_preload_content(
        self,
        network: Annotated[StrictStr, Field(description="network ID <br> *refers to [/networks](/reference/networks-list)")],
        addresses: Annotated[StrictStr, Field(description="token contract address, comma-separated if more than one token contract address")],
        include_market_cap: Annotated[Optional[StrictBool], Field(description="include market capitalization, default: false")] = None,
        include_24hr_vol: Annotated[Optional[StrictBool], Field(description="include 24hr volume, default: false")] = None,
        include_24hr_price_change: Annotated[Optional[StrictBool], Field(description="include 24hr price change, default: false")] = None,
        include_total_reserve_in_usd: Annotated[Optional[StrictBool], Field(description="include total reserve in USD, default: false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Token Price by Token Addresses

        This endpoint allows you to **get token price based on the provided token contract address on a network**

        :param network: network ID <br> *refers to [/networks](/reference/networks-list) (required)
        :type network: str
        :param addresses: token contract address, comma-separated if more than one token contract address (required)
        :type addresses: str
        :param include_market_cap: include market capitalization, default: false
        :type include_market_cap: bool
        :param include_24hr_vol: include 24hr volume, default: false
        :type include_24hr_vol: bool
        :param include_24hr_price_change: include 24hr price change, default: false
        :type include_24hr_price_change: bool
        :param include_total_reserve_in_usd: include total reserve in USD, default: false
        :type include_total_reserve_in_usd: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._onchain_simple_price_serialize(
            network=network,
            addresses=addresses,
            include_market_cap=include_market_cap,
            include_24hr_vol=include_24hr_vol,
            include_24hr_price_change=include_24hr_price_change,
            include_total_reserve_in_usd=include_total_reserve_in_usd,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnchainSimplePrice",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _onchain_simple_price_serialize(
        self,
        network,
        addresses,
        include_market_cap,
        include_24hr_vol,
        include_24hr_price_change,
        include_total_reserve_in_usd,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if network is not None:
            _path_params['network'] = network
        if addresses is not None:
            _path_params['addresses'] = addresses
        # process the query parameters
        if include_market_cap is not None:
            
            _query_params.append(('include_market_cap', include_market_cap))
            
        if include_24hr_vol is not None:
            
            _query_params.append(('include_24hr_vol', include_24hr_vol))
            
        if include_24hr_price_change is not None:
            
            _query_params.append(('include_24hr_price_change', include_24hr_price_change))
            
        if include_total_reserve_in_usd is not None:
            
            _query_params.append(('include_total_reserve_in_usd', include_total_reserve_in_usd))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'proKeyAuth', 
            'demoKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/onchain/simple/networks/{network}/token_price/{addresses}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def simple_price(
        self,
        ids: Annotated[StrictStr, Field(description="coins' IDs, comma-separated if querying more than 1 coin. <br> *refers to [`/coins/list`](/reference/coins-list).")],
        vs_currencies: Annotated[StrictStr, Field(description="target currency of coins, comma-separated if querying more than 1 currency. <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).")],
        include_market_cap: Annotated[Optional[StrictBool], Field(description="include market capitalization, default: false")] = None,
        include_24hr_vol: Annotated[Optional[StrictBool], Field(description="include 24hr volume, default: false")] = None,
        include_24hr_change: Annotated[Optional[StrictBool], Field(description="include 24hr change, default: false")] = None,
        include_last_updated_at: Annotated[Optional[StrictBool], Field(description="include last updated price time in UNIX, default: false")] = None,
        precision: Annotated[Optional[StrictStr], Field(description="decimal place for currency price value ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SimplePrice:
        """Coin Price by IDs

        This endpoint allows you to **query the prices of one or more coins by using their unique Coin API IDs**

        :param ids: coins' IDs, comma-separated if querying more than 1 coin. <br> *refers to [`/coins/list`](/reference/coins-list). (required)
        :type ids: str
        :param vs_currencies: target currency of coins, comma-separated if querying more than 1 currency. <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies). (required)
        :type vs_currencies: str
        :param include_market_cap: include market capitalization, default: false
        :type include_market_cap: bool
        :param include_24hr_vol: include 24hr volume, default: false
        :type include_24hr_vol: bool
        :param include_24hr_change: include 24hr change, default: false
        :type include_24hr_change: bool
        :param include_last_updated_at: include last updated price time in UNIX, default: false
        :type include_last_updated_at: bool
        :param precision: decimal place for currency price value 
        :type precision: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._simple_price_serialize(
            ids=ids,
            vs_currencies=vs_currencies,
            include_market_cap=include_market_cap,
            include_24hr_vol=include_24hr_vol,
            include_24hr_change=include_24hr_change,
            include_last_updated_at=include_last_updated_at,
            precision=precision,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SimplePrice",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def simple_price_with_http_info(
        self,
        ids: Annotated[StrictStr, Field(description="coins' IDs, comma-separated if querying more than 1 coin. <br> *refers to [`/coins/list`](/reference/coins-list).")],
        vs_currencies: Annotated[StrictStr, Field(description="target currency of coins, comma-separated if querying more than 1 currency. <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).")],
        include_market_cap: Annotated[Optional[StrictBool], Field(description="include market capitalization, default: false")] = None,
        include_24hr_vol: Annotated[Optional[StrictBool], Field(description="include 24hr volume, default: false")] = None,
        include_24hr_change: Annotated[Optional[StrictBool], Field(description="include 24hr change, default: false")] = None,
        include_last_updated_at: Annotated[Optional[StrictBool], Field(description="include last updated price time in UNIX, default: false")] = None,
        precision: Annotated[Optional[StrictStr], Field(description="decimal place for currency price value ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SimplePrice]:
        """Coin Price by IDs

        This endpoint allows you to **query the prices of one or more coins by using their unique Coin API IDs**

        :param ids: coins' IDs, comma-separated if querying more than 1 coin. <br> *refers to [`/coins/list`](/reference/coins-list). (required)
        :type ids: str
        :param vs_currencies: target currency of coins, comma-separated if querying more than 1 currency. <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies). (required)
        :type vs_currencies: str
        :param include_market_cap: include market capitalization, default: false
        :type include_market_cap: bool
        :param include_24hr_vol: include 24hr volume, default: false
        :type include_24hr_vol: bool
        :param include_24hr_change: include 24hr change, default: false
        :type include_24hr_change: bool
        :param include_last_updated_at: include last updated price time in UNIX, default: false
        :type include_last_updated_at: bool
        :param precision: decimal place for currency price value 
        :type precision: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._simple_price_serialize(
            ids=ids,
            vs_currencies=vs_currencies,
            include_market_cap=include_market_cap,
            include_24hr_vol=include_24hr_vol,
            include_24hr_change=include_24hr_change,
            include_last_updated_at=include_last_updated_at,
            precision=precision,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SimplePrice",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def simple_price_without_preload_content(
        self,
        ids: Annotated[StrictStr, Field(description="coins' IDs, comma-separated if querying more than 1 coin. <br> *refers to [`/coins/list`](/reference/coins-list).")],
        vs_currencies: Annotated[StrictStr, Field(description="target currency of coins, comma-separated if querying more than 1 currency. <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).")],
        include_market_cap: Annotated[Optional[StrictBool], Field(description="include market capitalization, default: false")] = None,
        include_24hr_vol: Annotated[Optional[StrictBool], Field(description="include 24hr volume, default: false")] = None,
        include_24hr_change: Annotated[Optional[StrictBool], Field(description="include 24hr change, default: false")] = None,
        include_last_updated_at: Annotated[Optional[StrictBool], Field(description="include last updated price time in UNIX, default: false")] = None,
        precision: Annotated[Optional[StrictStr], Field(description="decimal place for currency price value ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Coin Price by IDs

        This endpoint allows you to **query the prices of one or more coins by using their unique Coin API IDs**

        :param ids: coins' IDs, comma-separated if querying more than 1 coin. <br> *refers to [`/coins/list`](/reference/coins-list). (required)
        :type ids: str
        :param vs_currencies: target currency of coins, comma-separated if querying more than 1 currency. <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies). (required)
        :type vs_currencies: str
        :param include_market_cap: include market capitalization, default: false
        :type include_market_cap: bool
        :param include_24hr_vol: include 24hr volume, default: false
        :type include_24hr_vol: bool
        :param include_24hr_change: include 24hr change, default: false
        :type include_24hr_change: bool
        :param include_last_updated_at: include last updated price time in UNIX, default: false
        :type include_last_updated_at: bool
        :param precision: decimal place for currency price value 
        :type precision: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._simple_price_serialize(
            ids=ids,
            vs_currencies=vs_currencies,
            include_market_cap=include_market_cap,
            include_24hr_vol=include_24hr_vol,
            include_24hr_change=include_24hr_change,
            include_last_updated_at=include_last_updated_at,
            precision=precision,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SimplePrice",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _simple_price_serialize(
        self,
        ids,
        vs_currencies,
        include_market_cap,
        include_24hr_vol,
        include_24hr_change,
        include_last_updated_at,
        precision,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if vs_currencies is not None:
            
            _query_params.append(('vs_currencies', vs_currencies))
            
        if include_market_cap is not None:
            
            _query_params.append(('include_market_cap', include_market_cap))
            
        if include_24hr_vol is not None:
            
            _query_params.append(('include_24hr_vol', include_24hr_vol))
            
        if include_24hr_change is not None:
            
            _query_params.append(('include_24hr_change', include_24hr_change))
            
        if include_last_updated_at is not None:
            
            _query_params.append(('include_last_updated_at', include_last_updated_at))
            
        if precision is not None:
            
            _query_params.append(('precision', precision))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'proKeyAuth', 
            'demoKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/simple/price',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def simple_supported_currencies(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[str]:
        """Supported Currencies List

        This endpoint allows you to **query all the supported currencies on CoinGecko**

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._simple_supported_currencies_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def simple_supported_currencies_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[str]]:
        """Supported Currencies List

        This endpoint allows you to **query all the supported currencies on CoinGecko**

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._simple_supported_currencies_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def simple_supported_currencies_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Supported Currencies List

        This endpoint allows you to **query all the supported currencies on CoinGecko**

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._simple_supported_currencies_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _simple_supported_currencies_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'proKeyAuth', 
            'demoKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/simple/supported_vs_currencies',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def simple_token_price(
        self,
        id: Annotated[StrictStr, Field(description="asset platform's ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list).")],
        contract_addresses: Annotated[StrictStr, Field(description="the contract addresses of tokens, comma-separated if querying more than 1 token's contract address")],
        vs_currencies: Annotated[StrictStr, Field(description="target currency of coins, comma-separated if querying more than 1 currency. <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).")],
        include_market_cap: Annotated[Optional[StrictBool], Field(description="include market capitalization, default: false")] = None,
        include_24hr_vol: Annotated[Optional[StrictBool], Field(description="include 24hr volume, default: false")] = None,
        include_24hr_change: Annotated[Optional[StrictBool], Field(description="include 24hr change <br> default: false")] = None,
        include_last_updated_at: Annotated[Optional[StrictBool], Field(description="include last updated price time in UNIX , default: false")] = None,
        precision: Annotated[Optional[StrictStr], Field(description="decimal place for currency price value ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SimpleTokenPrice:
        """Coin Price by Token Addresses

        This endpoint allows you to **query a token price by using token contract address**

        :param id: asset platform's ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list). (required)
        :type id: str
        :param contract_addresses: the contract addresses of tokens, comma-separated if querying more than 1 token's contract address (required)
        :type contract_addresses: str
        :param vs_currencies: target currency of coins, comma-separated if querying more than 1 currency. <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies). (required)
        :type vs_currencies: str
        :param include_market_cap: include market capitalization, default: false
        :type include_market_cap: bool
        :param include_24hr_vol: include 24hr volume, default: false
        :type include_24hr_vol: bool
        :param include_24hr_change: include 24hr change <br> default: false
        :type include_24hr_change: bool
        :param include_last_updated_at: include last updated price time in UNIX , default: false
        :type include_last_updated_at: bool
        :param precision: decimal place for currency price value 
        :type precision: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._simple_token_price_serialize(
            id=id,
            contract_addresses=contract_addresses,
            vs_currencies=vs_currencies,
            include_market_cap=include_market_cap,
            include_24hr_vol=include_24hr_vol,
            include_24hr_change=include_24hr_change,
            include_last_updated_at=include_last_updated_at,
            precision=precision,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SimpleTokenPrice",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def simple_token_price_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="asset platform's ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list).")],
        contract_addresses: Annotated[StrictStr, Field(description="the contract addresses of tokens, comma-separated if querying more than 1 token's contract address")],
        vs_currencies: Annotated[StrictStr, Field(description="target currency of coins, comma-separated if querying more than 1 currency. <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).")],
        include_market_cap: Annotated[Optional[StrictBool], Field(description="include market capitalization, default: false")] = None,
        include_24hr_vol: Annotated[Optional[StrictBool], Field(description="include 24hr volume, default: false")] = None,
        include_24hr_change: Annotated[Optional[StrictBool], Field(description="include 24hr change <br> default: false")] = None,
        include_last_updated_at: Annotated[Optional[StrictBool], Field(description="include last updated price time in UNIX , default: false")] = None,
        precision: Annotated[Optional[StrictStr], Field(description="decimal place for currency price value ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SimpleTokenPrice]:
        """Coin Price by Token Addresses

        This endpoint allows you to **query a token price by using token contract address**

        :param id: asset platform's ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list). (required)
        :type id: str
        :param contract_addresses: the contract addresses of tokens, comma-separated if querying more than 1 token's contract address (required)
        :type contract_addresses: str
        :param vs_currencies: target currency of coins, comma-separated if querying more than 1 currency. <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies). (required)
        :type vs_currencies: str
        :param include_market_cap: include market capitalization, default: false
        :type include_market_cap: bool
        :param include_24hr_vol: include 24hr volume, default: false
        :type include_24hr_vol: bool
        :param include_24hr_change: include 24hr change <br> default: false
        :type include_24hr_change: bool
        :param include_last_updated_at: include last updated price time in UNIX , default: false
        :type include_last_updated_at: bool
        :param precision: decimal place for currency price value 
        :type precision: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._simple_token_price_serialize(
            id=id,
            contract_addresses=contract_addresses,
            vs_currencies=vs_currencies,
            include_market_cap=include_market_cap,
            include_24hr_vol=include_24hr_vol,
            include_24hr_change=include_24hr_change,
            include_last_updated_at=include_last_updated_at,
            precision=precision,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SimpleTokenPrice",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def simple_token_price_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="asset platform's ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list).")],
        contract_addresses: Annotated[StrictStr, Field(description="the contract addresses of tokens, comma-separated if querying more than 1 token's contract address")],
        vs_currencies: Annotated[StrictStr, Field(description="target currency of coins, comma-separated if querying more than 1 currency. <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).")],
        include_market_cap: Annotated[Optional[StrictBool], Field(description="include market capitalization, default: false")] = None,
        include_24hr_vol: Annotated[Optional[StrictBool], Field(description="include 24hr volume, default: false")] = None,
        include_24hr_change: Annotated[Optional[StrictBool], Field(description="include 24hr change <br> default: false")] = None,
        include_last_updated_at: Annotated[Optional[StrictBool], Field(description="include last updated price time in UNIX , default: false")] = None,
        precision: Annotated[Optional[StrictStr], Field(description="decimal place for currency price value ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Coin Price by Token Addresses

        This endpoint allows you to **query a token price by using token contract address**

        :param id: asset platform's ID <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list). (required)
        :type id: str
        :param contract_addresses: the contract addresses of tokens, comma-separated if querying more than 1 token's contract address (required)
        :type contract_addresses: str
        :param vs_currencies: target currency of coins, comma-separated if querying more than 1 currency. <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies). (required)
        :type vs_currencies: str
        :param include_market_cap: include market capitalization, default: false
        :type include_market_cap: bool
        :param include_24hr_vol: include 24hr volume, default: false
        :type include_24hr_vol: bool
        :param include_24hr_change: include 24hr change <br> default: false
        :type include_24hr_change: bool
        :param include_last_updated_at: include last updated price time in UNIX , default: false
        :type include_last_updated_at: bool
        :param precision: decimal place for currency price value 
        :type precision: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._simple_token_price_serialize(
            id=id,
            contract_addresses=contract_addresses,
            vs_currencies=vs_currencies,
            include_market_cap=include_market_cap,
            include_24hr_vol=include_24hr_vol,
            include_24hr_change=include_24hr_change,
            include_last_updated_at=include_last_updated_at,
            precision=precision,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SimpleTokenPrice",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _simple_token_price_serialize(
        self,
        id,
        contract_addresses,
        vs_currencies,
        include_market_cap,
        include_24hr_vol,
        include_24hr_change,
        include_last_updated_at,
        precision,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if contract_addresses is not None:
            
            _query_params.append(('contract_addresses', contract_addresses))
            
        if vs_currencies is not None:
            
            _query_params.append(('vs_currencies', vs_currencies))
            
        if include_market_cap is not None:
            
            _query_params.append(('include_market_cap', include_market_cap))
            
        if include_24hr_vol is not None:
            
            _query_params.append(('include_24hr_vol', include_24hr_vol))
            
        if include_24hr_change is not None:
            
            _query_params.append(('include_24hr_change', include_24hr_change))
            
        if include_last_updated_at is not None:
            
            _query_params.append(('include_last_updated_at', include_last_updated_at))
            
        if precision is not None:
            
            _query_params.append(('precision', precision))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'proKeyAuth', 
            'demoKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/simple/token_price/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


