# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from coingecko_sdk.models.coins_markets_sparkline_in7d import CoinsMarketsSparklineIn7d
from typing import Optional, Set
from typing_extensions import Self

class CoinsMarkets(BaseModel):
    """
    CoinsMarkets
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="coin ID")
    symbol: Optional[StrictStr] = Field(default=None, description="coin symbol")
    name: Optional[StrictStr] = Field(default=None, description="coin name")
    image: Optional[StrictStr] = Field(default=None, description="coin image url")
    current_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin current price in currency")
    market_cap: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin market cap in currency")
    market_cap_rank: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin rank by market cap")
    fully_diluted_valuation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin fully diluted valuation (fdv) in currency")
    total_volume: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin total trading volume in currency")
    high_24h: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin 24hr price high in currency")
    low_24h: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin 24hr price low in currency")
    price_change_24h: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin 24hr price change in currency")
    price_change_percentage_24h: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin 24hr price change in percentage")
    market_cap_change_24h: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin 24hr market cap change in currency")
    market_cap_change_percentage_24h: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin 24hr market cap change in percentage")
    circulating_supply: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin circulating supply")
    total_supply: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin total supply")
    max_supply: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin max supply")
    ath: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin all time high (ath) in currency")
    ath_change_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin all time high (ath) change in percentage")
    ath_date: Optional[datetime] = Field(default=None, description="coin all time high (ath) date")
    atl: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin all time low (atl) in currency")
    atl_change_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin all time low (atl) change in percentage")
    atl_date: Optional[datetime] = Field(default=None, description="coin all time low (atl) date")
    roi: Optional[StrictStr] = None
    last_updated: Optional[datetime] = Field(default=None, description="coin last updated timestamp")
    price_change_percentage_1h: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="coin 1h price change in percentage")
    sparkline_in_7d: Optional[CoinsMarketsSparklineIn7d] = None
    __properties: ClassVar[List[str]] = ["id", "symbol", "name", "image", "current_price", "market_cap", "market_cap_rank", "fully_diluted_valuation", "total_volume", "high_24h", "low_24h", "price_change_24h", "price_change_percentage_24h", "market_cap_change_24h", "market_cap_change_percentage_24h", "circulating_supply", "total_supply", "max_supply", "ath", "ath_change_percentage", "ath_date", "atl", "atl_change_percentage", "atl_date", "roi", "last_updated", "price_change_percentage_1h", "sparkline_in_7d"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoinsMarkets from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sparkline_in_7d
        if self.sparkline_in_7d:
            _dict['sparkline_in_7d'] = self.sparkline_in_7d.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoinsMarkets from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "symbol": obj.get("symbol"),
            "name": obj.get("name"),
            "image": obj.get("image"),
            "current_price": obj.get("current_price"),
            "market_cap": obj.get("market_cap"),
            "market_cap_rank": obj.get("market_cap_rank"),
            "fully_diluted_valuation": obj.get("fully_diluted_valuation"),
            "total_volume": obj.get("total_volume"),
            "high_24h": obj.get("high_24h"),
            "low_24h": obj.get("low_24h"),
            "price_change_24h": obj.get("price_change_24h"),
            "price_change_percentage_24h": obj.get("price_change_percentage_24h"),
            "market_cap_change_24h": obj.get("market_cap_change_24h"),
            "market_cap_change_percentage_24h": obj.get("market_cap_change_percentage_24h"),
            "circulating_supply": obj.get("circulating_supply"),
            "total_supply": obj.get("total_supply"),
            "max_supply": obj.get("max_supply"),
            "ath": obj.get("ath"),
            "ath_change_percentage": obj.get("ath_change_percentage"),
            "ath_date": obj.get("ath_date"),
            "atl": obj.get("atl"),
            "atl_change_percentage": obj.get("atl_change_percentage"),
            "atl_date": obj.get("atl_date"),
            "roi": obj.get("roi"),
            "last_updated": obj.get("last_updated"),
            "price_change_percentage_1h": obj.get("price_change_percentage_1h"),
            "sparkline_in_7d": CoinsMarketsSparklineIn7d.from_dict(obj["sparkline_in_7d"]) if obj.get("sparkline_in_7d") is not None else None
        })
        return _obj


