# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from coingecko_sdk.models.pool_data_inner_attributes_transactions_m5 import PoolDataInnerAttributesTransactionsM5
from typing import Optional, Set
from typing_extensions import Self

class PoolDataInnerAttributesTransactions(BaseModel):
    """
    PoolDataInnerAttributesTransactions
    """ # noqa: E501
    m5: Optional[PoolDataInnerAttributesTransactionsM5] = None
    m15: Optional[PoolDataInnerAttributesTransactionsM5] = None
    m30: Optional[PoolDataInnerAttributesTransactionsM5] = None
    h1: Optional[PoolDataInnerAttributesTransactionsM5] = None
    h24: Optional[PoolDataInnerAttributesTransactionsM5] = None
    __properties: ClassVar[List[str]] = ["m5", "m15", "m30", "h1", "h24"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PoolDataInnerAttributesTransactions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of m5
        if self.m5:
            _dict['m5'] = self.m5.to_dict()
        # override the default output from pydantic by calling `to_dict()` of m15
        if self.m15:
            _dict['m15'] = self.m15.to_dict()
        # override the default output from pydantic by calling `to_dict()` of m30
        if self.m30:
            _dict['m30'] = self.m30.to_dict()
        # override the default output from pydantic by calling `to_dict()` of h1
        if self.h1:
            _dict['h1'] = self.h1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of h24
        if self.h24:
            _dict['h24'] = self.h24.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PoolDataInnerAttributesTransactions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "m5": PoolDataInnerAttributesTransactionsM5.from_dict(obj["m5"]) if obj.get("m5") is not None else None,
            "m15": PoolDataInnerAttributesTransactionsM5.from_dict(obj["m15"]) if obj.get("m15") is not None else None,
            "m30": PoolDataInnerAttributesTransactionsM5.from_dict(obj["m30"]) if obj.get("m30") is not None else None,
            "h1": PoolDataInnerAttributesTransactionsM5.from_dict(obj["h1"]) if obj.get("h1") is not None else None,
            "h24": PoolDataInnerAttributesTransactionsM5.from_dict(obj["h24"]) if obj.get("h24") is not None else None
        })
        return _obj


