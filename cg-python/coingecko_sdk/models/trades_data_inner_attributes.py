# coding: utf-8

"""
    CoinGecko API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TradesDataInnerAttributes(BaseModel):
    """
    TradesDataInnerAttributes
    """ # noqa: E501
    block_number: Optional[StrictInt] = None
    tx_hash: Optional[StrictStr] = None
    tx_from_address: Optional[StrictStr] = None
    from_token_amount: Optional[StrictStr] = None
    to_token_amount: Optional[StrictStr] = None
    price_from_in_currency_token: Optional[StrictStr] = None
    price_to_in_currency_token: Optional[StrictStr] = None
    price_from_in_usd: Optional[StrictStr] = None
    price_to_in_usd: Optional[StrictStr] = None
    block_timestamp: Optional[StrictStr] = None
    kind: Optional[StrictStr] = None
    volume_in_usd: Optional[StrictStr] = None
    from_token_address: Optional[StrictStr] = None
    to_token_address: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["block_number", "tx_hash", "tx_from_address", "from_token_amount", "to_token_amount", "price_from_in_currency_token", "price_to_in_currency_token", "price_from_in_usd", "price_to_in_usd", "block_timestamp", "kind", "volume_in_usd", "from_token_address", "to_token_address"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TradesDataInnerAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TradesDataInnerAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "block_number": obj.get("block_number"),
            "tx_hash": obj.get("tx_hash"),
            "tx_from_address": obj.get("tx_from_address"),
            "from_token_amount": obj.get("from_token_amount"),
            "to_token_amount": obj.get("to_token_amount"),
            "price_from_in_currency_token": obj.get("price_from_in_currency_token"),
            "price_to_in_currency_token": obj.get("price_to_in_currency_token"),
            "price_from_in_usd": obj.get("price_from_in_usd"),
            "price_to_in_usd": obj.get("price_to_in_usd"),
            "block_timestamp": obj.get("block_timestamp"),
            "kind": obj.get("kind"),
            "volume_in_usd": obj.get("volume_in_usd"),
            "from_token_address": obj.get("from_token_address"),
            "to_token_address": obj.get("to_token_address")
        })
        return _obj


